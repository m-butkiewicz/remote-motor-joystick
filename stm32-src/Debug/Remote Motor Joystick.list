
Remote Motor Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002470  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002530  08002530  00012530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002568  08002568  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002568  08002568  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002568  08002568  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002568  08002568  00012568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800256c  0800256c  0001256c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  0800257c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  0800257c  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b50  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016cb  00000000  00000000  00026b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000778  00000000  00000000  00028250  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a0  00000000  00000000  000289c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000150e3  00000000  00000000  00029068  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006f32  00000000  00000000  0003e14b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074449  00000000  00000000  0004507d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b94c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018bc  00000000  00000000  000b9544  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002518 	.word	0x08002518

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002518 	.word	0x08002518

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
static void MX_USART2_UART_Init(void);



int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0

  HAL_Init();
 8000226:	f000 fa8d 	bl	8000744 <HAL_Init>
  SystemClock_Config();
 800022a:	f000 f819 	bl	8000260 <SystemClock_Config>
  MX_GPIO_Init();
 800022e:	f000 f89d 	bl	800036c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000232:	f000 f86b 	bl	800030c <MX_USART2_UART_Init>

  for (uint8_t i=0; i<7; i++) {
 8000236:	1dfb      	adds	r3, r7, #7
 8000238:	2200      	movs	r2, #0
 800023a:	701a      	strb	r2, [r3, #0]
 800023c:	e00b      	b.n	8000256 <main+0x36>
	  toggleUserLED();
 800023e:	f000 f9a6 	bl	800058e <toggleUserLED>
	  HAL_Delay(500);
 8000242:	23fa      	movs	r3, #250	; 0xfa
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	0018      	movs	r0, r3
 8000248:	f000 fae0 	bl	800080c <HAL_Delay>
  for (uint8_t i=0; i<7; i++) {
 800024c:	1dfb      	adds	r3, r7, #7
 800024e:	781a      	ldrb	r2, [r3, #0]
 8000250:	1dfb      	adds	r3, r7, #7
 8000252:	3201      	adds	r2, #1
 8000254:	701a      	strb	r2, [r3, #0]
 8000256:	1dfb      	adds	r3, r7, #7
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b06      	cmp	r3, #6
 800025c:	d9ef      	bls.n	800023e <main+0x1e>
  }

  while (1)
 800025e:	e7fe      	b.n	800025e <main+0x3e>

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b099      	sub	sp, #100	; 0x64
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	242c      	movs	r4, #44	; 0x2c
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	2334      	movs	r3, #52	; 0x34
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f002 f949 	bl	8002508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	231c      	movs	r3, #28
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	0018      	movs	r0, r3
 800027c:	2310      	movs	r3, #16
 800027e:	001a      	movs	r2, r3
 8000280:	2100      	movs	r1, #0
 8000282:	f002 f941 	bl	8002508 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000286:	003b      	movs	r3, r7
 8000288:	0018      	movs	r0, r3
 800028a:	231c      	movs	r3, #28
 800028c:	001a      	movs	r2, r3
 800028e:	2100      	movs	r1, #0
 8000290:	f002 f93a 	bl	8002508 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000294:	193b      	adds	r3, r7, r4
 8000296:	2201      	movs	r2, #1
 8000298:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800029a:	193b      	adds	r3, r7, r4
 800029c:	2205      	movs	r2, #5
 800029e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	2200      	movs	r2, #0
 80002a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	193b      	adds	r3, r7, r4
 80002a8:	0018      	movs	r0, r3
 80002aa:	f000 fda5 	bl	8000df8 <HAL_RCC_OscConfig>
 80002ae:	1e03      	subs	r3, r0, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002b2:	f000 f967 	bl	8000584 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	211c      	movs	r1, #28
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2207      	movs	r2, #7
 80002bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2201      	movs	r2, #1
 80002c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2100      	movs	r1, #0
 80002d4:	0018      	movs	r0, r3
 80002d6:	f001 f915 	bl	8001504 <HAL_RCC_ClockConfig>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002de:	f000 f951 	bl	8000584 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002e2:	003b      	movs	r3, r7
 80002e4:	2202      	movs	r2, #2
 80002e6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002e8:	003b      	movs	r3, r7
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ee:	003b      	movs	r3, r7
 80002f0:	0018      	movs	r0, r3
 80002f2:	f001 faa7 	bl	8001844 <HAL_RCCEx_PeriphCLKConfig>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80002fa:	f000 f943 	bl	8000584 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 80002fe:	f001 f9db 	bl	80016b8 <HAL_RCC_EnableCSS>
}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	46bd      	mov	sp, r7
 8000306:	b019      	add	sp, #100	; 0x64
 8000308:	bd90      	pop	{r4, r7, pc}
	...

0800030c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000312:	4a15      	ldr	r2, [pc, #84]	; (8000368 <MX_USART2_UART_Init+0x5c>)
 8000314:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000316:	4b13      	ldr	r3, [pc, #76]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000318:	22e1      	movs	r2, #225	; 0xe1
 800031a:	0252      	lsls	r2, r2, #9
 800031c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b11      	ldr	r3, [pc, #68]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <MX_USART2_UART_Init+0x58>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <MX_USART2_UART_Init+0x58>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000344:	2200      	movs	r2, #0
 8000346:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <MX_USART2_UART_Init+0x58>)
 800034a:	2200      	movs	r2, #0
 800034c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <MX_USART2_UART_Init+0x58>)
 8000350:	0018      	movs	r0, r3
 8000352:	f001 fb77 	bl	8001a44 <HAL_UART_Init>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d001      	beq.n	800035e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800035a:	f000 f913 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000028 	.word	0x20000028
 8000368:	40004400 	.word	0x40004400

0800036c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b08b      	sub	sp, #44	; 0x2c
 8000370:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000372:	2414      	movs	r4, #20
 8000374:	193b      	adds	r3, r7, r4
 8000376:	0018      	movs	r0, r3
 8000378:	2314      	movs	r3, #20
 800037a:	001a      	movs	r2, r3
 800037c:	2100      	movs	r1, #0
 800037e:	f002 f8c3 	bl	8002508 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000382:	4b78      	ldr	r3, [pc, #480]	; (8000564 <MX_GPIO_Init+0x1f8>)
 8000384:	695a      	ldr	r2, [r3, #20]
 8000386:	4b77      	ldr	r3, [pc, #476]	; (8000564 <MX_GPIO_Init+0x1f8>)
 8000388:	2180      	movs	r1, #128	; 0x80
 800038a:	0309      	lsls	r1, r1, #12
 800038c:	430a      	orrs	r2, r1
 800038e:	615a      	str	r2, [r3, #20]
 8000390:	4b74      	ldr	r3, [pc, #464]	; (8000564 <MX_GPIO_Init+0x1f8>)
 8000392:	695a      	ldr	r2, [r3, #20]
 8000394:	2380      	movs	r3, #128	; 0x80
 8000396:	031b      	lsls	r3, r3, #12
 8000398:	4013      	ands	r3, r2
 800039a:	613b      	str	r3, [r7, #16]
 800039c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800039e:	4b71      	ldr	r3, [pc, #452]	; (8000564 <MX_GPIO_Init+0x1f8>)
 80003a0:	695a      	ldr	r2, [r3, #20]
 80003a2:	4b70      	ldr	r3, [pc, #448]	; (8000564 <MX_GPIO_Init+0x1f8>)
 80003a4:	2180      	movs	r1, #128	; 0x80
 80003a6:	03c9      	lsls	r1, r1, #15
 80003a8:	430a      	orrs	r2, r1
 80003aa:	615a      	str	r2, [r3, #20]
 80003ac:	4b6d      	ldr	r3, [pc, #436]	; (8000564 <MX_GPIO_Init+0x1f8>)
 80003ae:	695a      	ldr	r2, [r3, #20]
 80003b0:	2380      	movs	r3, #128	; 0x80
 80003b2:	03db      	lsls	r3, r3, #15
 80003b4:	4013      	ands	r3, r2
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ba:	4b6a      	ldr	r3, [pc, #424]	; (8000564 <MX_GPIO_Init+0x1f8>)
 80003bc:	695a      	ldr	r2, [r3, #20]
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <MX_GPIO_Init+0x1f8>)
 80003c0:	2180      	movs	r1, #128	; 0x80
 80003c2:	0289      	lsls	r1, r1, #10
 80003c4:	430a      	orrs	r2, r1
 80003c6:	615a      	str	r2, [r3, #20]
 80003c8:	4b66      	ldr	r3, [pc, #408]	; (8000564 <MX_GPIO_Init+0x1f8>)
 80003ca:	695a      	ldr	r2, [r3, #20]
 80003cc:	2380      	movs	r3, #128	; 0x80
 80003ce:	029b      	lsls	r3, r3, #10
 80003d0:	4013      	ands	r3, r2
 80003d2:	60bb      	str	r3, [r7, #8]
 80003d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d6:	4b63      	ldr	r3, [pc, #396]	; (8000564 <MX_GPIO_Init+0x1f8>)
 80003d8:	695a      	ldr	r2, [r3, #20]
 80003da:	4b62      	ldr	r3, [pc, #392]	; (8000564 <MX_GPIO_Init+0x1f8>)
 80003dc:	2180      	movs	r1, #128	; 0x80
 80003de:	02c9      	lsls	r1, r1, #11
 80003e0:	430a      	orrs	r2, r1
 80003e2:	615a      	str	r2, [r3, #20]
 80003e4:	4b5f      	ldr	r3, [pc, #380]	; (8000564 <MX_GPIO_Init+0x1f8>)
 80003e6:	695a      	ldr	r2, [r3, #20]
 80003e8:	2380      	movs	r3, #128	; 0x80
 80003ea:	02db      	lsls	r3, r3, #11
 80003ec:	4013      	ands	r3, r2
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f2:	4b5c      	ldr	r3, [pc, #368]	; (8000564 <MX_GPIO_Init+0x1f8>)
 80003f4:	695a      	ldr	r2, [r3, #20]
 80003f6:	4b5b      	ldr	r3, [pc, #364]	; (8000564 <MX_GPIO_Init+0x1f8>)
 80003f8:	2180      	movs	r1, #128	; 0x80
 80003fa:	0349      	lsls	r1, r1, #13
 80003fc:	430a      	orrs	r2, r1
 80003fe:	615a      	str	r2, [r3, #20]
 8000400:	4b58      	ldr	r3, [pc, #352]	; (8000564 <MX_GPIO_Init+0x1f8>)
 8000402:	695a      	ldr	r2, [r3, #20]
 8000404:	2380      	movs	r3, #128	; 0x80
 8000406:	035b      	lsls	r3, r3, #13
 8000408:	4013      	ands	r3, r2
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DIR_Pin|STEP_Pin|M2_Pin, GPIO_PIN_RESET);
 800040e:	23b8      	movs	r3, #184	; 0xb8
 8000410:	0099      	lsls	r1, r3, #2
 8000412:	2390      	movs	r3, #144	; 0x90
 8000414:	05db      	lsls	r3, r3, #23
 8000416:	2200      	movs	r2, #0
 8000418:	0018      	movs	r0, r3
 800041a:	f000 fcb5 	bl	8000d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, GPIO_PIN_RESET);
 800041e:	4b52      	ldr	r3, [pc, #328]	; (8000568 <MX_GPIO_Init+0x1fc>)
 8000420:	2200      	movs	r2, #0
 8000422:	2180      	movs	r1, #128	; 0x80
 8000424:	0018      	movs	r0, r3
 8000426:	f000 fcaf 	bl	8000d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, GPIO_PIN_RESET);
 800042a:	4b50      	ldr	r3, [pc, #320]	; (800056c <MX_GPIO_Init+0x200>)
 800042c:	2200      	movs	r2, #0
 800042e:	2140      	movs	r1, #64	; 0x40
 8000430:	0018      	movs	r0, r3
 8000432:	f000 fca9 	bl	8000d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000436:	193b      	adds	r3, r7, r4
 8000438:	2280      	movs	r2, #128	; 0x80
 800043a:	0192      	lsls	r2, r2, #6
 800043c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800043e:	193b      	adds	r3, r7, r4
 8000440:	4a4b      	ldr	r2, [pc, #300]	; (8000570 <MX_GPIO_Init+0x204>)
 8000442:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	193b      	adds	r3, r7, r4
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800044a:	193b      	adds	r3, r7, r4
 800044c:	4a46      	ldr	r2, [pc, #280]	; (8000568 <MX_GPIO_Init+0x1fc>)
 800044e:	0019      	movs	r1, r3
 8000450:	0010      	movs	r0, r2
 8000452:	f000 fb21 	bl	8000a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC6 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000456:	0021      	movs	r1, r4
 8000458:	187b      	adds	r3, r7, r1
 800045a:	4a46      	ldr	r2, [pc, #280]	; (8000574 <MX_GPIO_Init+0x208>)
 800045c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800045e:	187b      	adds	r3, r7, r1
 8000460:	2203      	movs	r2, #3
 8000462:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800046a:	000c      	movs	r4, r1
 800046c:	187b      	adds	r3, r7, r1
 800046e:	4a3e      	ldr	r2, [pc, #248]	; (8000568 <MX_GPIO_Init+0x1fc>)
 8000470:	0019      	movs	r1, r3
 8000472:	0010      	movs	r0, r2
 8000474:	f000 fb10 	bl	8000a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA8 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8 
 8000478:	0021      	movs	r1, r4
 800047a:	187b      	adds	r3, r7, r1
 800047c:	4a3e      	ldr	r2, [pc, #248]	; (8000578 <MX_GPIO_Init+0x20c>)
 800047e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2203      	movs	r2, #3
 8000484:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048c:	000c      	movs	r4, r1
 800048e:	187a      	adds	r2, r7, r1
 8000490:	2390      	movs	r3, #144	; 0x90
 8000492:	05db      	lsls	r3, r3, #23
 8000494:	0011      	movs	r1, r2
 8000496:	0018      	movs	r0, r3
 8000498:	f000 fafe 	bl	8000a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin DIR_Pin STEP_Pin M2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|DIR_Pin|STEP_Pin|M2_Pin;
 800049c:	0021      	movs	r1, r4
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	22b8      	movs	r2, #184	; 0xb8
 80004a2:	0092      	lsls	r2, r2, #2
 80004a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2201      	movs	r2, #1
 80004aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	000c      	movs	r4, r1
 80004ba:	187a      	adds	r2, r7, r1
 80004bc:	2390      	movs	r3, #144	; 0x90
 80004be:	05db      	lsls	r3, r3, #23
 80004c0:	0011      	movs	r1, r2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 fae8 	bl	8000a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80004c8:	0021      	movs	r1, r4
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	4a2b      	ldr	r2, [pc, #172]	; (800057c <MX_GPIO_Init+0x210>)
 80004ce:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2203      	movs	r2, #3
 80004d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004dc:	000c      	movs	r4, r1
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	4a22      	ldr	r2, [pc, #136]	; (800056c <MX_GPIO_Init+0x200>)
 80004e2:	0019      	movs	r1, r3
 80004e4:	0010      	movs	r0, r2
 80004e6:	f000 fad7 	bl	8000a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_Pin */
  GPIO_InitStruct.Pin = M1_Pin;
 80004ea:	0021      	movs	r1, r4
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	2201      	movs	r2, #1
 80004f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(M1_GPIO_Port, &GPIO_InitStruct);
 8000504:	000c      	movs	r4, r1
 8000506:	187b      	adds	r3, r7, r1
 8000508:	4a17      	ldr	r2, [pc, #92]	; (8000568 <MX_GPIO_Init+0x1fc>)
 800050a:	0019      	movs	r1, r3
 800050c:	0010      	movs	r0, r2
 800050e:	f000 fac3 	bl	8000a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000512:	0021      	movs	r1, r4
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2204      	movs	r2, #4
 8000518:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2203      	movs	r2, #3
 800051e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000526:	000c      	movs	r4, r1
 8000528:	187b      	adds	r3, r7, r1
 800052a:	4a15      	ldr	r2, [pc, #84]	; (8000580 <MX_GPIO_Init+0x214>)
 800052c:	0019      	movs	r1, r3
 800052e:	0010      	movs	r0, r2
 8000530:	f000 fab2 	bl	8000a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : M0_Pin */
  GPIO_InitStruct.Pin = M0_Pin;
 8000534:	0021      	movs	r1, r4
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2240      	movs	r2, #64	; 0x40
 800053a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2201      	movs	r2, #1
 8000540:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(M0_GPIO_Port, &GPIO_InitStruct);
 800054e:	187b      	adds	r3, r7, r1
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <MX_GPIO_Init+0x200>)
 8000552:	0019      	movs	r1, r3
 8000554:	0010      	movs	r0, r2
 8000556:	f000 fa9f 	bl	8000a98 <HAL_GPIO_Init>

}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b00b      	add	sp, #44	; 0x2c
 8000560:	bd90      	pop	{r4, r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	40021000 	.word	0x40021000
 8000568:	48000800 	.word	0x48000800
 800056c:	48000400 	.word	0x48000400
 8000570:	10210000 	.word	0x10210000
 8000574:	00001f7f 	.word	0x00001f7f
 8000578:	00009d13 	.word	0x00009d13
 800057c:	0000ffbf 	.word	0x0000ffbf
 8000580:	48000c00 	.word	0x48000c00

08000584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <toggleUserLED>:
#include "main.h"
#include "ports.h"

void setUserLED(void) { HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); }
void resetUserLED(void) { HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); }
void toggleUserLED(void) { HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); }
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
 8000592:	2390      	movs	r3, #144	; 0x90
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	2120      	movs	r1, #32
 8000598:	0018      	movs	r0, r3
 800059a:	f000 fc12 	bl	8000dc2 <HAL_GPIO_TogglePin>
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <HAL_MspInit+0x44>)
 80005ac:	699a      	ldr	r2, [r3, #24]
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <HAL_MspInit+0x44>)
 80005b0:	2101      	movs	r1, #1
 80005b2:	430a      	orrs	r2, r1
 80005b4:	619a      	str	r2, [r3, #24]
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <HAL_MspInit+0x44>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	2201      	movs	r2, #1
 80005bc:	4013      	ands	r3, r2
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <HAL_MspInit+0x44>)
 80005c4:	69da      	ldr	r2, [r3, #28]
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <HAL_MspInit+0x44>)
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	0549      	lsls	r1, r1, #21
 80005cc:	430a      	orrs	r2, r1
 80005ce:	61da      	str	r2, [r3, #28]
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <HAL_MspInit+0x44>)
 80005d2:	69da      	ldr	r2, [r3, #28]
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	055b      	lsls	r3, r3, #21
 80005d8:	4013      	ands	r3, r2
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	2314      	movs	r3, #20
 80005f6:	18fb      	adds	r3, r7, r3
 80005f8:	0018      	movs	r0, r3
 80005fa:	2314      	movs	r3, #20
 80005fc:	001a      	movs	r2, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	f001 ff82 	bl	8002508 <memset>
  if(huart->Instance==USART2)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a20      	ldr	r2, [pc, #128]	; (800068c <HAL_UART_MspInit+0xa0>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d13a      	bne.n	8000684 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <HAL_UART_MspInit+0xa4>)
 8000610:	69da      	ldr	r2, [r3, #28]
 8000612:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <HAL_UART_MspInit+0xa4>)
 8000614:	2180      	movs	r1, #128	; 0x80
 8000616:	0289      	lsls	r1, r1, #10
 8000618:	430a      	orrs	r2, r1
 800061a:	61da      	str	r2, [r3, #28]
 800061c:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <HAL_UART_MspInit+0xa4>)
 800061e:	69da      	ldr	r2, [r3, #28]
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	029b      	lsls	r3, r3, #10
 8000624:	4013      	ands	r3, r2
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <HAL_UART_MspInit+0xa4>)
 800062c:	695a      	ldr	r2, [r3, #20]
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <HAL_UART_MspInit+0xa4>)
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	0289      	lsls	r1, r1, #10
 8000634:	430a      	orrs	r2, r1
 8000636:	615a      	str	r2, [r3, #20]
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <HAL_UART_MspInit+0xa4>)
 800063a:	695a      	ldr	r2, [r3, #20]
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	029b      	lsls	r3, r3, #10
 8000640:	4013      	ands	r3, r2
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000646:	2114      	movs	r1, #20
 8000648:	187b      	adds	r3, r7, r1
 800064a:	220c      	movs	r2, #12
 800064c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2202      	movs	r2, #2
 8000652:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2201      	movs	r2, #1
 8000664:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	187a      	adds	r2, r7, r1
 8000668:	2390      	movs	r3, #144	; 0x90
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	0011      	movs	r1, r2
 800066e:	0018      	movs	r0, r3
 8000670:	f000 fa12 	bl	8000a98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	201c      	movs	r0, #28
 800067a:	f000 f995 	bl	80009a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800067e:	201c      	movs	r0, #28
 8000680:	f000 f9a7 	bl	80009d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b00a      	add	sp, #40	; 0x28
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40004400 	.word	0x40004400
 8000690:	40021000 	.word	0x40021000

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000698:	f001 f8ba 	bl	8001810 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <HardFault_Handler+0x4>

080006a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c0:	f000 f888 	bl	80007d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006d0:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <USART2_IRQHandler+0x14>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fa0a 	bl	8001aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	20000028 	.word	0x20000028

080006e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f4:	480d      	ldr	r0, [pc, #52]	; (800072c <LoopForever+0x6>)
  ldr r1, =_edata
 80006f6:	490e      	ldr	r1, [pc, #56]	; (8000730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f8:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <LoopForever+0xe>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006fc:	e002      	b.n	8000704 <LoopCopyDataInit>

080006fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000702:	3304      	adds	r3, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000708:	d3f9      	bcc.n	80006fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070a:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <LoopForever+0x12>)
  ldr r4, =_ebss
 800070c:	4c0b      	ldr	r4, [pc, #44]	; (800073c <LoopForever+0x16>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000710:	e001      	b.n	8000716 <LoopFillZerobss>

08000712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000714:	3204      	adds	r2, #4

08000716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000718:	d3fb      	bcc.n	8000712 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800071a:	f7ff ffe3 	bl	80006e4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800071e:	f001 fecf 	bl	80024c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000722:	f7ff fd7d 	bl	8000220 <main>

08000726 <LoopForever>:

LoopForever:
    b LoopForever
 8000726:	e7fe      	b.n	8000726 <LoopForever>
  ldr   r0, =_estack
 8000728:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000734:	08002570 	.word	0x08002570
  ldr r2, =_sbss
 8000738:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800073c:	200000ac 	.word	0x200000ac

08000740 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC1_COMP_IRQHandler>
	...

08000744 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <HAL_Init+0x24>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_Init+0x24>)
 800074e:	2110      	movs	r1, #16
 8000750:	430a      	orrs	r2, r1
 8000752:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000754:	2000      	movs	r0, #0
 8000756:	f000 f809 	bl	800076c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800075a:	f7ff ff23 	bl	80005a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800075e:	2300      	movs	r3, #0
}
 8000760:	0018      	movs	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	40022000 	.word	0x40022000

0800076c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <HAL_InitTick+0x5c>)
 8000776:	681c      	ldr	r4, [r3, #0]
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <HAL_InitTick+0x60>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	0019      	movs	r1, r3
 800077e:	23fa      	movs	r3, #250	; 0xfa
 8000780:	0098      	lsls	r0, r3, #2
 8000782:	f7ff fcc1 	bl	8000108 <__udivsi3>
 8000786:	0003      	movs	r3, r0
 8000788:	0019      	movs	r1, r3
 800078a:	0020      	movs	r0, r4
 800078c:	f7ff fcbc 	bl	8000108 <__udivsi3>
 8000790:	0003      	movs	r3, r0
 8000792:	0018      	movs	r0, r3
 8000794:	f000 f92d 	bl	80009f2 <HAL_SYSTICK_Config>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800079c:	2301      	movs	r3, #1
 800079e:	e00f      	b.n	80007c0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d80b      	bhi.n	80007be <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a6:	6879      	ldr	r1, [r7, #4]
 80007a8:	2301      	movs	r3, #1
 80007aa:	425b      	negs	r3, r3
 80007ac:	2200      	movs	r2, #0
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 f8fa 	bl	80009a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_InitTick+0x64>)
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e000      	b.n	80007c0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	0018      	movs	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b003      	add	sp, #12
 80007c6:	bd90      	pop	{r4, r7, pc}
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20000004 	.word	0x20000004

080007d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x1c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	001a      	movs	r2, r3
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <HAL_IncTick+0x20>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	18d2      	adds	r2, r2, r3
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <HAL_IncTick+0x20>)
 80007e6:	601a      	str	r2, [r3, #0]
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	20000008 	.word	0x20000008
 80007f4:	200000a8 	.word	0x200000a8

080007f8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  return uwTick;
 80007fc:	4b02      	ldr	r3, [pc, #8]	; (8000808 <HAL_GetTick+0x10>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	0018      	movs	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	200000a8 	.word	0x200000a8

0800080c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000814:	f7ff fff0 	bl	80007f8 <HAL_GetTick>
 8000818:	0003      	movs	r3, r0
 800081a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	3301      	adds	r3, #1
 8000824:	d005      	beq.n	8000832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_Delay+0x40>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	001a      	movs	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	189b      	adds	r3, r3, r2
 8000830:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	f7ff ffe0 	bl	80007f8 <HAL_GetTick>
 8000838:	0002      	movs	r2, r0
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	429a      	cmp	r2, r3
 8000842:	d8f7      	bhi.n	8000834 <HAL_Delay+0x28>
  {
  }
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b004      	add	sp, #16
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000008 	.word	0x20000008

08000850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	0002      	movs	r2, r0
 8000858:	1dfb      	adds	r3, r7, #7
 800085a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800085c:	1dfb      	adds	r3, r7, #7
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b7f      	cmp	r3, #127	; 0x7f
 8000862:	d809      	bhi.n	8000878 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000864:	1dfb      	adds	r3, r7, #7
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	001a      	movs	r2, r3
 800086a:	231f      	movs	r3, #31
 800086c:	401a      	ands	r2, r3
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <__NVIC_EnableIRQ+0x30>)
 8000870:	2101      	movs	r1, #1
 8000872:	4091      	lsls	r1, r2
 8000874:	000a      	movs	r2, r1
 8000876:	601a      	str	r2, [r3, #0]
  }
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b002      	add	sp, #8
 800087e:	bd80      	pop	{r7, pc}
 8000880:	e000e100 	.word	0xe000e100

08000884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	0002      	movs	r2, r0
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b7f      	cmp	r3, #127	; 0x7f
 8000898:	d828      	bhi.n	80008ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800089a:	4a2f      	ldr	r2, [pc, #188]	; (8000958 <__NVIC_SetPriority+0xd4>)
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	089b      	lsrs	r3, r3, #2
 80008a4:	33c0      	adds	r3, #192	; 0xc0
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	589b      	ldr	r3, [r3, r2]
 80008aa:	1dfa      	adds	r2, r7, #7
 80008ac:	7812      	ldrb	r2, [r2, #0]
 80008ae:	0011      	movs	r1, r2
 80008b0:	2203      	movs	r2, #3
 80008b2:	400a      	ands	r2, r1
 80008b4:	00d2      	lsls	r2, r2, #3
 80008b6:	21ff      	movs	r1, #255	; 0xff
 80008b8:	4091      	lsls	r1, r2
 80008ba:	000a      	movs	r2, r1
 80008bc:	43d2      	mvns	r2, r2
 80008be:	401a      	ands	r2, r3
 80008c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	019b      	lsls	r3, r3, #6
 80008c6:	22ff      	movs	r2, #255	; 0xff
 80008c8:	401a      	ands	r2, r3
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	0018      	movs	r0, r3
 80008d0:	2303      	movs	r3, #3
 80008d2:	4003      	ands	r3, r0
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d8:	481f      	ldr	r0, [pc, #124]	; (8000958 <__NVIC_SetPriority+0xd4>)
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	b25b      	sxtb	r3, r3
 80008e0:	089b      	lsrs	r3, r3, #2
 80008e2:	430a      	orrs	r2, r1
 80008e4:	33c0      	adds	r3, #192	; 0xc0
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008ea:	e031      	b.n	8000950 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ec:	4a1b      	ldr	r2, [pc, #108]	; (800095c <__NVIC_SetPriority+0xd8>)
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	0019      	movs	r1, r3
 80008f4:	230f      	movs	r3, #15
 80008f6:	400b      	ands	r3, r1
 80008f8:	3b08      	subs	r3, #8
 80008fa:	089b      	lsrs	r3, r3, #2
 80008fc:	3306      	adds	r3, #6
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	18d3      	adds	r3, r2, r3
 8000902:	3304      	adds	r3, #4
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	1dfa      	adds	r2, r7, #7
 8000908:	7812      	ldrb	r2, [r2, #0]
 800090a:	0011      	movs	r1, r2
 800090c:	2203      	movs	r2, #3
 800090e:	400a      	ands	r2, r1
 8000910:	00d2      	lsls	r2, r2, #3
 8000912:	21ff      	movs	r1, #255	; 0xff
 8000914:	4091      	lsls	r1, r2
 8000916:	000a      	movs	r2, r1
 8000918:	43d2      	mvns	r2, r2
 800091a:	401a      	ands	r2, r3
 800091c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	019b      	lsls	r3, r3, #6
 8000922:	22ff      	movs	r2, #255	; 0xff
 8000924:	401a      	ands	r2, r3
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	0018      	movs	r0, r3
 800092c:	2303      	movs	r3, #3
 800092e:	4003      	ands	r3, r0
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <__NVIC_SetPriority+0xd8>)
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	001c      	movs	r4, r3
 800093c:	230f      	movs	r3, #15
 800093e:	4023      	ands	r3, r4
 8000940:	3b08      	subs	r3, #8
 8000942:	089b      	lsrs	r3, r3, #2
 8000944:	430a      	orrs	r2, r1
 8000946:	3306      	adds	r3, #6
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	18c3      	adds	r3, r0, r3
 800094c:	3304      	adds	r3, #4
 800094e:	601a      	str	r2, [r3, #0]
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b003      	add	sp, #12
 8000956:	bd90      	pop	{r4, r7, pc}
 8000958:	e000e100 	.word	0xe000e100
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <SysTick_Config+0x40>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d901      	bls.n	8000976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000972:	2301      	movs	r3, #1
 8000974:	e010      	b.n	8000998 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <SysTick_Config+0x44>)
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	3a01      	subs	r2, #1
 800097c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097e:	2301      	movs	r3, #1
 8000980:	425b      	negs	r3, r3
 8000982:	2103      	movs	r1, #3
 8000984:	0018      	movs	r0, r3
 8000986:	f7ff ff7d 	bl	8000884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SysTick_Config+0x44>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <SysTick_Config+0x44>)
 8000992:	2207      	movs	r2, #7
 8000994:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000996:	2300      	movs	r3, #0
}
 8000998:	0018      	movs	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	b002      	add	sp, #8
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	00ffffff 	.word	0x00ffffff
 80009a4:	e000e010 	.word	0xe000e010

080009a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	210f      	movs	r1, #15
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	1c02      	adds	r2, r0, #0
 80009b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	0011      	movs	r1, r2
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff ff5d 	bl	8000884 <__NVIC_SetPriority>
}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b004      	add	sp, #16
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	0002      	movs	r2, r0
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff ff33 	bl	8000850 <__NVIC_EnableIRQ>
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b002      	add	sp, #8
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff ffaf 	bl	8000960 <SysTick_Config>
 8000a02:	0003      	movs	r3, r0
}
 8000a04:	0018      	movs	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b002      	add	sp, #8
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a14:	230f      	movs	r3, #15
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2221      	movs	r2, #33	; 0x21
 8000a20:	5c9b      	ldrb	r3, [r3, r2]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d007      	beq.n	8000a38 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a2e:	230f      	movs	r3, #15
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
 8000a36:	e028      	b.n	8000a8a <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	210e      	movs	r1, #14
 8000a44:	438a      	bics	r2, r1
 8000a46:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2101      	movs	r1, #1
 8000a54:	438a      	bics	r2, r1
 8000a56:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a60:	2101      	movs	r1, #1
 8000a62:	4091      	lsls	r1, r2
 8000a64:	000a      	movs	r2, r1
 8000a66:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2221      	movs	r2, #33	; 0x21
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2220      	movs	r2, #32
 8000a74:	2100      	movs	r1, #0
 8000a76:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d004      	beq.n	8000a8a <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	0010      	movs	r0, r2
 8000a88:	4798      	blx	r3
    } 
  }
  return status;
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	18fb      	adds	r3, r7, r3
 8000a8e:	781b      	ldrb	r3, [r3, #0]
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b004      	add	sp, #16
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa6:	e155      	b.n	8000d54 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2101      	movs	r1, #1
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	000a      	movs	r2, r1
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d100      	bne.n	8000ac0 <HAL_GPIO_Init+0x28>
 8000abe:	e146      	b.n	8000d4e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d003      	beq.n	8000ad0 <HAL_GPIO_Init+0x38>
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b12      	cmp	r3, #18
 8000ace:	d123      	bne.n	8000b18 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	08da      	lsrs	r2, r3, #3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3208      	adds	r2, #8
 8000ad8:	0092      	lsls	r2, r2, #2
 8000ada:	58d3      	ldr	r3, [r2, r3]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	2207      	movs	r2, #7
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	220f      	movs	r2, #15
 8000ae8:	409a      	lsls	r2, r3
 8000aea:	0013      	movs	r3, r2
 8000aec:	43da      	mvns	r2, r3
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	691a      	ldr	r2, [r3, #16]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	2107      	movs	r1, #7
 8000afc:	400b      	ands	r3, r1
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	409a      	lsls	r2, r3
 8000b02:	0013      	movs	r3, r2
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	08da      	lsrs	r2, r3, #3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3208      	adds	r2, #8
 8000b12:	0092      	lsls	r2, r2, #2
 8000b14:	6939      	ldr	r1, [r7, #16]
 8000b16:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	2203      	movs	r2, #3
 8000b24:	409a      	lsls	r2, r3
 8000b26:	0013      	movs	r3, r2
 8000b28:	43da      	mvns	r2, r3
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	2203      	movs	r2, #3
 8000b36:	401a      	ands	r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	409a      	lsls	r2, r3
 8000b3e:	0013      	movs	r3, r2
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d00b      	beq.n	8000b6c <HAL_GPIO_Init+0xd4>
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d007      	beq.n	8000b6c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b60:	2b11      	cmp	r3, #17
 8000b62:	d003      	beq.n	8000b6c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2b12      	cmp	r3, #18
 8000b6a:	d130      	bne.n	8000bce <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	2203      	movs	r2, #3
 8000b78:	409a      	lsls	r2, r3
 8000b7a:	0013      	movs	r3, r2
 8000b7c:	43da      	mvns	r2, r3
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	4013      	ands	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	68da      	ldr	r2, [r3, #12]
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	409a      	lsls	r2, r3
 8000b8e:	0013      	movs	r3, r2
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	409a      	lsls	r2, r3
 8000ba8:	0013      	movs	r3, r2
 8000baa:	43da      	mvns	r2, r3
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	091b      	lsrs	r3, r3, #4
 8000bb8:	2201      	movs	r2, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	2203      	movs	r2, #3
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	0013      	movs	r3, r2
 8000bde:	43da      	mvns	r2, r3
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	409a      	lsls	r2, r3
 8000bf0:	0013      	movs	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	055b      	lsls	r3, r3, #21
 8000c06:	4013      	ands	r3, r2
 8000c08:	d100      	bne.n	8000c0c <HAL_GPIO_Init+0x174>
 8000c0a:	e0a0      	b.n	8000d4e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0c:	4b57      	ldr	r3, [pc, #348]	; (8000d6c <HAL_GPIO_Init+0x2d4>)
 8000c0e:	699a      	ldr	r2, [r3, #24]
 8000c10:	4b56      	ldr	r3, [pc, #344]	; (8000d6c <HAL_GPIO_Init+0x2d4>)
 8000c12:	2101      	movs	r1, #1
 8000c14:	430a      	orrs	r2, r1
 8000c16:	619a      	str	r2, [r3, #24]
 8000c18:	4b54      	ldr	r3, [pc, #336]	; (8000d6c <HAL_GPIO_Init+0x2d4>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4013      	ands	r3, r2
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c24:	4a52      	ldr	r2, [pc, #328]	; (8000d70 <HAL_GPIO_Init+0x2d8>)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	089b      	lsrs	r3, r3, #2
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	589b      	ldr	r3, [r3, r2]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	2203      	movs	r2, #3
 8000c36:	4013      	ands	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	220f      	movs	r2, #15
 8000c3c:	409a      	lsls	r2, r3
 8000c3e:	0013      	movs	r3, r2
 8000c40:	43da      	mvns	r2, r3
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	2390      	movs	r3, #144	; 0x90
 8000c4c:	05db      	lsls	r3, r3, #23
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d019      	beq.n	8000c86 <HAL_GPIO_Init+0x1ee>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a47      	ldr	r2, [pc, #284]	; (8000d74 <HAL_GPIO_Init+0x2dc>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d013      	beq.n	8000c82 <HAL_GPIO_Init+0x1ea>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a46      	ldr	r2, [pc, #280]	; (8000d78 <HAL_GPIO_Init+0x2e0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d00d      	beq.n	8000c7e <HAL_GPIO_Init+0x1e6>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a45      	ldr	r2, [pc, #276]	; (8000d7c <HAL_GPIO_Init+0x2e4>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d007      	beq.n	8000c7a <HAL_GPIO_Init+0x1e2>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a44      	ldr	r2, [pc, #272]	; (8000d80 <HAL_GPIO_Init+0x2e8>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d101      	bne.n	8000c76 <HAL_GPIO_Init+0x1de>
 8000c72:	2304      	movs	r3, #4
 8000c74:	e008      	b.n	8000c88 <HAL_GPIO_Init+0x1f0>
 8000c76:	2305      	movs	r3, #5
 8000c78:	e006      	b.n	8000c88 <HAL_GPIO_Init+0x1f0>
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e004      	b.n	8000c88 <HAL_GPIO_Init+0x1f0>
 8000c7e:	2302      	movs	r3, #2
 8000c80:	e002      	b.n	8000c88 <HAL_GPIO_Init+0x1f0>
 8000c82:	2301      	movs	r3, #1
 8000c84:	e000      	b.n	8000c88 <HAL_GPIO_Init+0x1f0>
 8000c86:	2300      	movs	r3, #0
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	2103      	movs	r1, #3
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	0092      	lsls	r2, r2, #2
 8000c90:	4093      	lsls	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c98:	4935      	ldr	r1, [pc, #212]	; (8000d70 <HAL_GPIO_Init+0x2d8>)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	089b      	lsrs	r3, r3, #2
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ca6:	4b37      	ldr	r3, [pc, #220]	; (8000d84 <HAL_GPIO_Init+0x2ec>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	025b      	lsls	r3, r3, #9
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d003      	beq.n	8000cca <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cca:	4b2e      	ldr	r3, [pc, #184]	; (8000d84 <HAL_GPIO_Init+0x2ec>)
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000cd0:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <HAL_GPIO_Init+0x2ec>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43da      	mvns	r2, r3
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	029b      	lsls	r3, r3, #10
 8000ce8:	4013      	ands	r3, r2
 8000cea:	d003      	beq.n	8000cf4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <HAL_GPIO_Init+0x2ec>)
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cfa:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <HAL_GPIO_Init+0x2ec>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	43da      	mvns	r2, r3
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	035b      	lsls	r3, r3, #13
 8000d12:	4013      	ands	r3, r2
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_GPIO_Init+0x2ec>)
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_GPIO_Init+0x2ec>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	43da      	mvns	r2, r3
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	039b      	lsls	r3, r3, #14
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	d003      	beq.n	8000d48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_GPIO_Init+0x2ec>)
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	40da      	lsrs	r2, r3
 8000d5c:	1e13      	subs	r3, r2, #0
 8000d5e:	d000      	beq.n	8000d62 <HAL_GPIO_Init+0x2ca>
 8000d60:	e6a2      	b.n	8000aa8 <HAL_GPIO_Init+0x10>
  } 
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b006      	add	sp, #24
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010000 	.word	0x40010000
 8000d74:	48000400 	.word	0x48000400
 8000d78:	48000800 	.word	0x48000800
 8000d7c:	48000c00 	.word	0x48000c00
 8000d80:	48001000 	.word	0x48001000
 8000d84:	40010400 	.word	0x40010400

08000d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	0008      	movs	r0, r1
 8000d92:	0011      	movs	r1, r2
 8000d94:	1cbb      	adds	r3, r7, #2
 8000d96:	1c02      	adds	r2, r0, #0
 8000d98:	801a      	strh	r2, [r3, #0]
 8000d9a:	1c7b      	adds	r3, r7, #1
 8000d9c:	1c0a      	adds	r2, r1, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000da0:	1c7b      	adds	r3, r7, #1
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d004      	beq.n	8000db2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000da8:	1cbb      	adds	r3, r7, #2
 8000daa:	881a      	ldrh	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000db0:	e003      	b.n	8000dba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000db2:	1cbb      	adds	r3, r7, #2
 8000db4:	881a      	ldrh	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	000a      	movs	r2, r1
 8000dcc:	1cbb      	adds	r3, r7, #2
 8000dce:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	1cba      	adds	r2, r7, #2
 8000dd6:	8812      	ldrh	r2, [r2, #0]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	d005      	beq.n	8000de8 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ddc:	1cbb      	adds	r3, r7, #2
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	041a      	lsls	r2, r3, #16
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000de6:	e003      	b.n	8000df0 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000de8:	1cbb      	adds	r3, r7, #2
 8000dea:	881a      	ldrh	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	619a      	str	r2, [r3, #24]
}
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b002      	add	sp, #8
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d102      	bne.n	8000e0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	f000 fb76 	bl	80014f8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2201      	movs	r2, #1
 8000e12:	4013      	ands	r3, r2
 8000e14:	d100      	bne.n	8000e18 <HAL_RCC_OscConfig+0x20>
 8000e16:	e08e      	b.n	8000f36 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e18:	4bc5      	ldr	r3, [pc, #788]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	220c      	movs	r2, #12
 8000e1e:	4013      	ands	r3, r2
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d00e      	beq.n	8000e42 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e24:	4bc2      	ldr	r3, [pc, #776]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	220c      	movs	r2, #12
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d117      	bne.n	8000e60 <HAL_RCC_OscConfig+0x68>
 8000e30:	4bbf      	ldr	r3, [pc, #764]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	23c0      	movs	r3, #192	; 0xc0
 8000e36:	025b      	lsls	r3, r3, #9
 8000e38:	401a      	ands	r2, r3
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	025b      	lsls	r3, r3, #9
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d10e      	bne.n	8000e60 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e42:	4bbb      	ldr	r3, [pc, #748]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	029b      	lsls	r3, r3, #10
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d100      	bne.n	8000e50 <HAL_RCC_OscConfig+0x58>
 8000e4e:	e071      	b.n	8000f34 <HAL_RCC_OscConfig+0x13c>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d000      	beq.n	8000e5a <HAL_RCC_OscConfig+0x62>
 8000e58:	e06c      	b.n	8000f34 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	f000 fb4c 	bl	80014f8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d107      	bne.n	8000e78 <HAL_RCC_OscConfig+0x80>
 8000e68:	4bb1      	ldr	r3, [pc, #708]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4bb0      	ldr	r3, [pc, #704]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	0249      	lsls	r1, r1, #9
 8000e72:	430a      	orrs	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	e02f      	b.n	8000ed8 <HAL_RCC_OscConfig+0xe0>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10c      	bne.n	8000e9a <HAL_RCC_OscConfig+0xa2>
 8000e80:	4bab      	ldr	r3, [pc, #684]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4baa      	ldr	r3, [pc, #680]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e86:	49ab      	ldr	r1, [pc, #684]	; (8001134 <HAL_RCC_OscConfig+0x33c>)
 8000e88:	400a      	ands	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	4ba8      	ldr	r3, [pc, #672]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4ba7      	ldr	r3, [pc, #668]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000e92:	49a9      	ldr	r1, [pc, #676]	; (8001138 <HAL_RCC_OscConfig+0x340>)
 8000e94:	400a      	ands	r2, r1
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	e01e      	b.n	8000ed8 <HAL_RCC_OscConfig+0xe0>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b05      	cmp	r3, #5
 8000ea0:	d10e      	bne.n	8000ec0 <HAL_RCC_OscConfig+0xc8>
 8000ea2:	4ba3      	ldr	r3, [pc, #652]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4ba2      	ldr	r3, [pc, #648]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	02c9      	lsls	r1, r1, #11
 8000eac:	430a      	orrs	r2, r1
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	4b9f      	ldr	r3, [pc, #636]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b9e      	ldr	r3, [pc, #632]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000eb6:	2180      	movs	r1, #128	; 0x80
 8000eb8:	0249      	lsls	r1, r1, #9
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	e00b      	b.n	8000ed8 <HAL_RCC_OscConfig+0xe0>
 8000ec0:	4b9b      	ldr	r3, [pc, #620]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b9a      	ldr	r3, [pc, #616]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000ec6:	499b      	ldr	r1, [pc, #620]	; (8001134 <HAL_RCC_OscConfig+0x33c>)
 8000ec8:	400a      	ands	r2, r1
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	4b98      	ldr	r3, [pc, #608]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b97      	ldr	r3, [pc, #604]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000ed2:	4999      	ldr	r1, [pc, #612]	; (8001138 <HAL_RCC_OscConfig+0x340>)
 8000ed4:	400a      	ands	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d014      	beq.n	8000f0a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fc8a 	bl	80007f8 <HAL_GetTick>
 8000ee4:	0003      	movs	r3, r0
 8000ee6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eea:	f7ff fc85 	bl	80007f8 <HAL_GetTick>
 8000eee:	0002      	movs	r2, r0
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b64      	cmp	r3, #100	; 0x64
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e2fd      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efc:	4b8c      	ldr	r3, [pc, #560]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	029b      	lsls	r3, r3, #10
 8000f04:	4013      	ands	r3, r2
 8000f06:	d0f0      	beq.n	8000eea <HAL_RCC_OscConfig+0xf2>
 8000f08:	e015      	b.n	8000f36 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0a:	f7ff fc75 	bl	80007f8 <HAL_GetTick>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f14:	f7ff fc70 	bl	80007f8 <HAL_GetTick>
 8000f18:	0002      	movs	r2, r0
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b64      	cmp	r3, #100	; 0x64
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e2e8      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f26:	4b82      	ldr	r3, [pc, #520]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	029b      	lsls	r3, r3, #10
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d1f0      	bne.n	8000f14 <HAL_RCC_OscConfig+0x11c>
 8000f32:	e000      	b.n	8000f36 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f34:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d100      	bne.n	8000f42 <HAL_RCC_OscConfig+0x14a>
 8000f40:	e06c      	b.n	800101c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f42:	4b7b      	ldr	r3, [pc, #492]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	220c      	movs	r2, #12
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d00e      	beq.n	8000f6a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f4c:	4b78      	ldr	r3, [pc, #480]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	220c      	movs	r2, #12
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d11f      	bne.n	8000f98 <HAL_RCC_OscConfig+0x1a0>
 8000f58:	4b75      	ldr	r3, [pc, #468]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	23c0      	movs	r3, #192	; 0xc0
 8000f5e:	025b      	lsls	r3, r3, #9
 8000f60:	401a      	ands	r2, r3
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d116      	bne.n	8000f98 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f6a:	4b71      	ldr	r3, [pc, #452]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2202      	movs	r2, #2
 8000f70:	4013      	ands	r3, r2
 8000f72:	d005      	beq.n	8000f80 <HAL_RCC_OscConfig+0x188>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d001      	beq.n	8000f80 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e2bb      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f80:	4b6b      	ldr	r3, [pc, #428]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	22f8      	movs	r2, #248	; 0xf8
 8000f86:	4393      	bics	r3, r2
 8000f88:	0019      	movs	r1, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	00da      	lsls	r2, r3, #3
 8000f90:	4b67      	ldr	r3, [pc, #412]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000f92:	430a      	orrs	r2, r1
 8000f94:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f96:	e041      	b.n	800101c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d024      	beq.n	8000fea <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fa0:	4b63      	ldr	r3, [pc, #396]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b62      	ldr	r3, [pc, #392]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fac:	f7ff fc24 	bl	80007f8 <HAL_GetTick>
 8000fb0:	0003      	movs	r3, r0
 8000fb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fb6:	f7ff fc1f 	bl	80007f8 <HAL_GetTick>
 8000fba:	0002      	movs	r2, r0
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e297      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc8:	4b59      	ldr	r3, [pc, #356]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d0f1      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd2:	4b57      	ldr	r3, [pc, #348]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	22f8      	movs	r2, #248	; 0xf8
 8000fd8:	4393      	bics	r3, r2
 8000fda:	0019      	movs	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	00da      	lsls	r2, r3, #3
 8000fe2:	4b53      	ldr	r3, [pc, #332]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	e018      	b.n	800101c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fea:	4b51      	ldr	r3, [pc, #324]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4b50      	ldr	r3, [pc, #320]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	438a      	bics	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff6:	f7ff fbff 	bl	80007f8 <HAL_GetTick>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001000:	f7ff fbfa 	bl	80007f8 <HAL_GetTick>
 8001004:	0002      	movs	r2, r0
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e272      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001012:	4b47      	ldr	r3, [pc, #284]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2202      	movs	r2, #2
 8001018:	4013      	ands	r3, r2
 800101a:	d1f1      	bne.n	8001000 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2208      	movs	r2, #8
 8001022:	4013      	ands	r3, r2
 8001024:	d036      	beq.n	8001094 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d019      	beq.n	8001062 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800102e:	4b40      	ldr	r3, [pc, #256]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8001030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001032:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8001034:	2101      	movs	r1, #1
 8001036:	430a      	orrs	r2, r1
 8001038:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800103a:	f7ff fbdd 	bl	80007f8 <HAL_GetTick>
 800103e:	0003      	movs	r3, r0
 8001040:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001044:	f7ff fbd8 	bl	80007f8 <HAL_GetTick>
 8001048:	0002      	movs	r2, r0
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e250      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001056:	4b36      	ldr	r3, [pc, #216]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	2202      	movs	r2, #2
 800105c:	4013      	ands	r3, r2
 800105e:	d0f1      	beq.n	8001044 <HAL_RCC_OscConfig+0x24c>
 8001060:	e018      	b.n	8001094 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001062:	4b33      	ldr	r3, [pc, #204]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8001064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001066:	4b32      	ldr	r3, [pc, #200]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8001068:	2101      	movs	r1, #1
 800106a:	438a      	bics	r2, r1
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106e:	f7ff fbc3 	bl	80007f8 <HAL_GetTick>
 8001072:	0003      	movs	r3, r0
 8001074:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001078:	f7ff fbbe 	bl	80007f8 <HAL_GetTick>
 800107c:	0002      	movs	r2, r0
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e236      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800108a:	4b29      	ldr	r3, [pc, #164]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 800108c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108e:	2202      	movs	r2, #2
 8001090:	4013      	ands	r3, r2
 8001092:	d1f1      	bne.n	8001078 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2204      	movs	r2, #4
 800109a:	4013      	ands	r3, r2
 800109c:	d100      	bne.n	80010a0 <HAL_RCC_OscConfig+0x2a8>
 800109e:	e0b5      	b.n	800120c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010a0:	231f      	movs	r3, #31
 80010a2:	18fb      	adds	r3, r7, r3
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 80010aa:	69da      	ldr	r2, [r3, #28]
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	055b      	lsls	r3, r3, #21
 80010b0:	4013      	ands	r3, r2
 80010b2:	d111      	bne.n	80010d8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b4:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 80010b6:	69da      	ldr	r2, [r3, #28]
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 80010ba:	2180      	movs	r1, #128	; 0x80
 80010bc:	0549      	lsls	r1, r1, #21
 80010be:	430a      	orrs	r2, r1
 80010c0:	61da      	str	r2, [r3, #28]
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 80010c4:	69da      	ldr	r2, [r3, #28]
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	055b      	lsls	r3, r3, #21
 80010ca:	4013      	ands	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010d0:	231f      	movs	r3, #31
 80010d2:	18fb      	adds	r3, r7, r3
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_RCC_OscConfig+0x344>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	4013      	ands	r3, r2
 80010e2:	d11a      	bne.n	800111a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_RCC_OscConfig+0x344>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <HAL_RCC_OscConfig+0x344>)
 80010ea:	2180      	movs	r1, #128	; 0x80
 80010ec:	0049      	lsls	r1, r1, #1
 80010ee:	430a      	orrs	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010f2:	f7ff fb81 	bl	80007f8 <HAL_GetTick>
 80010f6:	0003      	movs	r3, r0
 80010f8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010fc:	f7ff fb7c 	bl	80007f8 <HAL_GetTick>
 8001100:	0002      	movs	r2, r0
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	; 0x64
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e1f4      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_RCC_OscConfig+0x344>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4013      	ands	r3, r2
 8001118:	d0f0      	beq.n	80010fc <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d10e      	bne.n	8001140 <HAL_RCC_OscConfig+0x348>
 8001122:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8001124:	6a1a      	ldr	r2, [r3, #32]
 8001126:	4b02      	ldr	r3, [pc, #8]	; (8001130 <HAL_RCC_OscConfig+0x338>)
 8001128:	2101      	movs	r1, #1
 800112a:	430a      	orrs	r2, r1
 800112c:	621a      	str	r2, [r3, #32]
 800112e:	e035      	b.n	800119c <HAL_RCC_OscConfig+0x3a4>
 8001130:	40021000 	.word	0x40021000
 8001134:	fffeffff 	.word	0xfffeffff
 8001138:	fffbffff 	.word	0xfffbffff
 800113c:	40007000 	.word	0x40007000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10c      	bne.n	8001162 <HAL_RCC_OscConfig+0x36a>
 8001148:	4bca      	ldr	r3, [pc, #808]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800114a:	6a1a      	ldr	r2, [r3, #32]
 800114c:	4bc9      	ldr	r3, [pc, #804]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800114e:	2101      	movs	r1, #1
 8001150:	438a      	bics	r2, r1
 8001152:	621a      	str	r2, [r3, #32]
 8001154:	4bc7      	ldr	r3, [pc, #796]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001156:	6a1a      	ldr	r2, [r3, #32]
 8001158:	4bc6      	ldr	r3, [pc, #792]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800115a:	2104      	movs	r1, #4
 800115c:	438a      	bics	r2, r1
 800115e:	621a      	str	r2, [r3, #32]
 8001160:	e01c      	b.n	800119c <HAL_RCC_OscConfig+0x3a4>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b05      	cmp	r3, #5
 8001168:	d10c      	bne.n	8001184 <HAL_RCC_OscConfig+0x38c>
 800116a:	4bc2      	ldr	r3, [pc, #776]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800116c:	6a1a      	ldr	r2, [r3, #32]
 800116e:	4bc1      	ldr	r3, [pc, #772]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001170:	2104      	movs	r1, #4
 8001172:	430a      	orrs	r2, r1
 8001174:	621a      	str	r2, [r3, #32]
 8001176:	4bbf      	ldr	r3, [pc, #764]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001178:	6a1a      	ldr	r2, [r3, #32]
 800117a:	4bbe      	ldr	r3, [pc, #760]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800117c:	2101      	movs	r1, #1
 800117e:	430a      	orrs	r2, r1
 8001180:	621a      	str	r2, [r3, #32]
 8001182:	e00b      	b.n	800119c <HAL_RCC_OscConfig+0x3a4>
 8001184:	4bbb      	ldr	r3, [pc, #748]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001186:	6a1a      	ldr	r2, [r3, #32]
 8001188:	4bba      	ldr	r3, [pc, #744]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800118a:	2101      	movs	r1, #1
 800118c:	438a      	bics	r2, r1
 800118e:	621a      	str	r2, [r3, #32]
 8001190:	4bb8      	ldr	r3, [pc, #736]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001192:	6a1a      	ldr	r2, [r3, #32]
 8001194:	4bb7      	ldr	r3, [pc, #732]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001196:	2104      	movs	r1, #4
 8001198:	438a      	bics	r2, r1
 800119a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d014      	beq.n	80011ce <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a4:	f7ff fb28 	bl	80007f8 <HAL_GetTick>
 80011a8:	0003      	movs	r3, r0
 80011aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ac:	e009      	b.n	80011c2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011ae:	f7ff fb23 	bl	80007f8 <HAL_GetTick>
 80011b2:	0002      	movs	r2, r0
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	4aaf      	ldr	r2, [pc, #700]	; (8001478 <HAL_RCC_OscConfig+0x680>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e19a      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c2:	4bac      	ldr	r3, [pc, #688]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	2202      	movs	r2, #2
 80011c8:	4013      	ands	r3, r2
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0x3b6>
 80011cc:	e013      	b.n	80011f6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ce:	f7ff fb13 	bl	80007f8 <HAL_GetTick>
 80011d2:	0003      	movs	r3, r0
 80011d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d6:	e009      	b.n	80011ec <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011d8:	f7ff fb0e 	bl	80007f8 <HAL_GetTick>
 80011dc:	0002      	movs	r2, r0
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	4aa5      	ldr	r2, [pc, #660]	; (8001478 <HAL_RCC_OscConfig+0x680>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e185      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ec:	4ba1      	ldr	r3, [pc, #644]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	2202      	movs	r2, #2
 80011f2:	4013      	ands	r3, r2
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011f6:	231f      	movs	r3, #31
 80011f8:	18fb      	adds	r3, r7, r3
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d105      	bne.n	800120c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001200:	4b9c      	ldr	r3, [pc, #624]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001202:	69da      	ldr	r2, [r3, #28]
 8001204:	4b9b      	ldr	r3, [pc, #620]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001206:	499d      	ldr	r1, [pc, #628]	; (800147c <HAL_RCC_OscConfig+0x684>)
 8001208:	400a      	ands	r2, r1
 800120a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2210      	movs	r2, #16
 8001212:	4013      	ands	r3, r2
 8001214:	d063      	beq.n	80012de <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d12a      	bne.n	8001274 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800121e:	4b95      	ldr	r3, [pc, #596]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001222:	4b94      	ldr	r3, [pc, #592]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001224:	2104      	movs	r1, #4
 8001226:	430a      	orrs	r2, r1
 8001228:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800122a:	4b92      	ldr	r3, [pc, #584]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800122c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800122e:	4b91      	ldr	r3, [pc, #580]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001230:	2101      	movs	r1, #1
 8001232:	430a      	orrs	r2, r1
 8001234:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001236:	f7ff fadf 	bl	80007f8 <HAL_GetTick>
 800123a:	0003      	movs	r3, r0
 800123c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001240:	f7ff fada 	bl	80007f8 <HAL_GetTick>
 8001244:	0002      	movs	r2, r0
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e152      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001252:	4b88      	ldr	r3, [pc, #544]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001256:	2202      	movs	r2, #2
 8001258:	4013      	ands	r3, r2
 800125a:	d0f1      	beq.n	8001240 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800125c:	4b85      	ldr	r3, [pc, #532]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800125e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001260:	22f8      	movs	r2, #248	; 0xf8
 8001262:	4393      	bics	r3, r2
 8001264:	0019      	movs	r1, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	00da      	lsls	r2, r3, #3
 800126c:	4b81      	ldr	r3, [pc, #516]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800126e:	430a      	orrs	r2, r1
 8001270:	635a      	str	r2, [r3, #52]	; 0x34
 8001272:	e034      	b.n	80012de <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	3305      	adds	r3, #5
 800127a:	d111      	bne.n	80012a0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800127c:	4b7d      	ldr	r3, [pc, #500]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800127e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001280:	4b7c      	ldr	r3, [pc, #496]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001282:	2104      	movs	r1, #4
 8001284:	438a      	bics	r2, r1
 8001286:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001288:	4b7a      	ldr	r3, [pc, #488]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800128a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128c:	22f8      	movs	r2, #248	; 0xf8
 800128e:	4393      	bics	r3, r2
 8001290:	0019      	movs	r1, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	00da      	lsls	r2, r3, #3
 8001298:	4b76      	ldr	r3, [pc, #472]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800129a:	430a      	orrs	r2, r1
 800129c:	635a      	str	r2, [r3, #52]	; 0x34
 800129e:	e01e      	b.n	80012de <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012a0:	4b74      	ldr	r3, [pc, #464]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80012a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a4:	4b73      	ldr	r3, [pc, #460]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80012a6:	2104      	movs	r1, #4
 80012a8:	430a      	orrs	r2, r1
 80012aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80012ac:	4b71      	ldr	r3, [pc, #452]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80012ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012b0:	4b70      	ldr	r3, [pc, #448]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80012b2:	2101      	movs	r1, #1
 80012b4:	438a      	bics	r2, r1
 80012b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b8:	f7ff fa9e 	bl	80007f8 <HAL_GetTick>
 80012bc:	0003      	movs	r3, r0
 80012be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012c2:	f7ff fa99 	bl	80007f8 <HAL_GetTick>
 80012c6:	0002      	movs	r2, r0
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e111      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012d4:	4b67      	ldr	r3, [pc, #412]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80012d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d8:	2202      	movs	r2, #2
 80012da:	4013      	ands	r3, r2
 80012dc:	d1f1      	bne.n	80012c2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2220      	movs	r2, #32
 80012e4:	4013      	ands	r3, r2
 80012e6:	d05c      	beq.n	80013a2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80012e8:	4b62      	ldr	r3, [pc, #392]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	220c      	movs	r2, #12
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b0c      	cmp	r3, #12
 80012f2:	d00e      	beq.n	8001312 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80012f4:	4b5f      	ldr	r3, [pc, #380]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	220c      	movs	r2, #12
 80012fa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d114      	bne.n	800132a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001300:	4b5c      	ldr	r3, [pc, #368]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	23c0      	movs	r3, #192	; 0xc0
 8001306:	025b      	lsls	r3, r3, #9
 8001308:	401a      	ands	r2, r3
 800130a:	23c0      	movs	r3, #192	; 0xc0
 800130c:	025b      	lsls	r3, r3, #9
 800130e:	429a      	cmp	r2, r3
 8001310:	d10b      	bne.n	800132a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001312:	4b58      	ldr	r3, [pc, #352]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	025b      	lsls	r3, r3, #9
 800131a:	4013      	ands	r3, r2
 800131c:	d040      	beq.n	80013a0 <HAL_RCC_OscConfig+0x5a8>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d03c      	beq.n	80013a0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0e6      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d01b      	beq.n	800136a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001332:	4b50      	ldr	r3, [pc, #320]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001336:	4b4f      	ldr	r3, [pc, #316]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001338:	2180      	movs	r1, #128	; 0x80
 800133a:	0249      	lsls	r1, r1, #9
 800133c:	430a      	orrs	r2, r1
 800133e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fa5a 	bl	80007f8 <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800134a:	f7ff fa55 	bl	80007f8 <HAL_GetTick>
 800134e:	0002      	movs	r2, r0
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e0cd      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800135c:	4b45      	ldr	r3, [pc, #276]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800135e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	025b      	lsls	r3, r3, #9
 8001364:	4013      	ands	r3, r2
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x552>
 8001368:	e01b      	b.n	80013a2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800136a:	4b42      	ldr	r3, [pc, #264]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800136c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800136e:	4b41      	ldr	r3, [pc, #260]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001370:	4943      	ldr	r1, [pc, #268]	; (8001480 <HAL_RCC_OscConfig+0x688>)
 8001372:	400a      	ands	r2, r1
 8001374:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001376:	f7ff fa3f 	bl	80007f8 <HAL_GetTick>
 800137a:	0003      	movs	r3, r0
 800137c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001380:	f7ff fa3a 	bl	80007f8 <HAL_GetTick>
 8001384:	0002      	movs	r2, r0
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e0b2      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001392:	4b38      	ldr	r3, [pc, #224]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	025b      	lsls	r3, r3, #9
 800139a:	4013      	ands	r3, r2
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x588>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80013a0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d100      	bne.n	80013ac <HAL_RCC_OscConfig+0x5b4>
 80013aa:	e0a4      	b.n	80014f6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	220c      	movs	r2, #12
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	d100      	bne.n	80013ba <HAL_RCC_OscConfig+0x5c2>
 80013b8:	e078      	b.n	80014ac <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d14c      	bne.n	800145c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c2:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80013c8:	492e      	ldr	r1, [pc, #184]	; (8001484 <HAL_RCC_OscConfig+0x68c>)
 80013ca:	400a      	ands	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fa13 	bl	80007f8 <HAL_GetTick>
 80013d2:	0003      	movs	r3, r0
 80013d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d8:	f7ff fa0e 	bl	80007f8 <HAL_GetTick>
 80013dc:	0002      	movs	r2, r0
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e086      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ea:	4b22      	ldr	r3, [pc, #136]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	049b      	lsls	r3, r3, #18
 80013f2:	4013      	ands	r3, r2
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 80013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fa:	220f      	movs	r2, #15
 80013fc:	4393      	bics	r3, r2
 80013fe:	0019      	movs	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001406:	430a      	orrs	r2, r1
 8001408:	62da      	str	r2, [r3, #44]	; 0x2c
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4a1e      	ldr	r2, [pc, #120]	; (8001488 <HAL_RCC_OscConfig+0x690>)
 8001410:	4013      	ands	r3, r2
 8001412:	0019      	movs	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141c:	431a      	orrs	r2, r3
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001420:	430a      	orrs	r2, r1
 8001422:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800142a:	2180      	movs	r1, #128	; 0x80
 800142c:	0449      	lsls	r1, r1, #17
 800142e:	430a      	orrs	r2, r1
 8001430:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff f9e1 	bl	80007f8 <HAL_GetTick>
 8001436:	0003      	movs	r3, r0
 8001438:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff f9dc 	bl	80007f8 <HAL_GetTick>
 8001440:	0002      	movs	r2, r0
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e054      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	049b      	lsls	r3, r3, #18
 8001456:	4013      	ands	r3, r2
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x644>
 800145a:	e04c      	b.n	80014f6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <HAL_RCC_OscConfig+0x67c>)
 8001462:	4908      	ldr	r1, [pc, #32]	; (8001484 <HAL_RCC_OscConfig+0x68c>)
 8001464:	400a      	ands	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff f9c6 	bl	80007f8 <HAL_GetTick>
 800146c:	0003      	movs	r3, r0
 800146e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001470:	e015      	b.n	800149e <HAL_RCC_OscConfig+0x6a6>
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	40021000 	.word	0x40021000
 8001478:	00001388 	.word	0x00001388
 800147c:	efffffff 	.word	0xefffffff
 8001480:	fffeffff 	.word	0xfffeffff
 8001484:	feffffff 	.word	0xfeffffff
 8001488:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800148c:	f7ff f9b4 	bl	80007f8 <HAL_GetTick>
 8001490:	0002      	movs	r2, r0
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e02c      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <HAL_RCC_OscConfig+0x708>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	049b      	lsls	r3, r3, #18
 80014a6:	4013      	ands	r3, r2
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x694>
 80014aa:	e024      	b.n	80014f6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e01f      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_RCC_OscConfig+0x708>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <HAL_RCC_OscConfig+0x708>)
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	23c0      	movs	r3, #192	; 0xc0
 80014c8:	025b      	lsls	r3, r3, #9
 80014ca:	401a      	ands	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d10e      	bne.n	80014f2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	220f      	movs	r2, #15
 80014d8:	401a      	ands	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014de:	429a      	cmp	r2, r3
 80014e0:	d107      	bne.n	80014f2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	23f0      	movs	r3, #240	; 0xf0
 80014e6:	039b      	lsls	r3, r3, #14
 80014e8:	401a      	ands	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d001      	beq.n	80014f6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	0018      	movs	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b008      	add	sp, #32
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40021000 	.word	0x40021000

08001504 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0bf      	b.n	8001698 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001518:	4b61      	ldr	r3, [pc, #388]	; (80016a0 <HAL_RCC_ClockConfig+0x19c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2201      	movs	r2, #1
 800151e:	4013      	ands	r3, r2
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d911      	bls.n	800154a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b5e      	ldr	r3, [pc, #376]	; (80016a0 <HAL_RCC_ClockConfig+0x19c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2201      	movs	r2, #1
 800152c:	4393      	bics	r3, r2
 800152e:	0019      	movs	r1, r3
 8001530:	4b5b      	ldr	r3, [pc, #364]	; (80016a0 <HAL_RCC_ClockConfig+0x19c>)
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001538:	4b59      	ldr	r3, [pc, #356]	; (80016a0 <HAL_RCC_ClockConfig+0x19c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2201      	movs	r2, #1
 800153e:	4013      	ands	r3, r2
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d001      	beq.n	800154a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e0a6      	b.n	8001698 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2202      	movs	r2, #2
 8001550:	4013      	ands	r3, r2
 8001552:	d015      	beq.n	8001580 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2204      	movs	r2, #4
 800155a:	4013      	ands	r3, r2
 800155c:	d006      	beq.n	800156c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800155e:	4b51      	ldr	r3, [pc, #324]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001564:	21e0      	movs	r1, #224	; 0xe0
 8001566:	00c9      	lsls	r1, r1, #3
 8001568:	430a      	orrs	r2, r1
 800156a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800156c:	4b4d      	ldr	r3, [pc, #308]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	22f0      	movs	r2, #240	; 0xf0
 8001572:	4393      	bics	r3, r2
 8001574:	0019      	movs	r1, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	4b4a      	ldr	r3, [pc, #296]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 800157c:	430a      	orrs	r2, r1
 800157e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2201      	movs	r2, #1
 8001586:	4013      	ands	r3, r2
 8001588:	d04c      	beq.n	8001624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d107      	bne.n	80015a2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	4b44      	ldr	r3, [pc, #272]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	029b      	lsls	r3, r3, #10
 800159a:	4013      	ands	r3, r2
 800159c:	d120      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e07a      	b.n	8001698 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d107      	bne.n	80015ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015aa:	4b3e      	ldr	r3, [pc, #248]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	049b      	lsls	r3, r3, #18
 80015b2:	4013      	ands	r3, r2
 80015b4:	d114      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e06e      	b.n	8001698 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015c2:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 80015c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	025b      	lsls	r3, r3, #9
 80015ca:	4013      	ands	r3, r2
 80015cc:	d108      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e062      	b.n	8001698 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d2:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2202      	movs	r2, #2
 80015d8:	4013      	ands	r3, r2
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e05b      	b.n	8001698 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e0:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2203      	movs	r2, #3
 80015e6:	4393      	bics	r3, r2
 80015e8:	0019      	movs	r1, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	4b2d      	ldr	r3, [pc, #180]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 80015f0:	430a      	orrs	r2, r1
 80015f2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015f4:	f7ff f900 	bl	80007f8 <HAL_GetTick>
 80015f8:	0003      	movs	r3, r0
 80015fa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fc:	e009      	b.n	8001612 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fe:	f7ff f8fb 	bl	80007f8 <HAL_GetTick>
 8001602:	0002      	movs	r2, r0
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	4a27      	ldr	r2, [pc, #156]	; (80016a8 <HAL_RCC_ClockConfig+0x1a4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e042      	b.n	8001698 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001612:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	220c      	movs	r2, #12
 8001618:	401a      	ands	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	429a      	cmp	r2, r3
 8001622:	d1ec      	bne.n	80015fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <HAL_RCC_ClockConfig+0x19c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2201      	movs	r2, #1
 800162a:	4013      	ands	r3, r2
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d211      	bcs.n	8001656 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_RCC_ClockConfig+0x19c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2201      	movs	r2, #1
 8001638:	4393      	bics	r3, r2
 800163a:	0019      	movs	r1, r3
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_RCC_ClockConfig+0x19c>)
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <HAL_RCC_ClockConfig+0x19c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2201      	movs	r2, #1
 800164a:	4013      	ands	r3, r2
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d001      	beq.n	8001656 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e020      	b.n	8001698 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2204      	movs	r2, #4
 800165c:	4013      	ands	r3, r2
 800165e:	d009      	beq.n	8001674 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001660:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4a11      	ldr	r2, [pc, #68]	; (80016ac <HAL_RCC_ClockConfig+0x1a8>)
 8001666:	4013      	ands	r3, r2
 8001668:	0019      	movs	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 8001670:	430a      	orrs	r2, r1
 8001672:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001674:	f000 f82e 	bl	80016d4 <HAL_RCC_GetSysClockFreq>
 8001678:	0001      	movs	r1, r0
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_RCC_ClockConfig+0x1a0>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	220f      	movs	r2, #15
 8001682:	4013      	ands	r3, r2
 8001684:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_RCC_ClockConfig+0x1ac>)
 8001686:	5cd3      	ldrb	r3, [r2, r3]
 8001688:	000a      	movs	r2, r1
 800168a:	40da      	lsrs	r2, r3
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_RCC_ClockConfig+0x1b0>)
 800168e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001690:	2000      	movs	r0, #0
 8001692:	f7ff f86b 	bl	800076c <HAL_InitTick>
  
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b004      	add	sp, #16
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40022000 	.word	0x40022000
 80016a4:	40021000 	.word	0x40021000
 80016a8:	00001388 	.word	0x00001388
 80016ac:	fffff8ff 	.word	0xfffff8ff
 80016b0:	08002550 	.word	0x08002550
 80016b4:	20000000 	.word	0x20000000

080016b8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <HAL_RCC_EnableCSS+0x18>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <HAL_RCC_EnableCSS+0x18>)
 80016c2:	2180      	movs	r1, #128	; 0x80
 80016c4:	0309      	lsls	r1, r1, #12
 80016c6:	430a      	orrs	r2, r1
 80016c8:	601a      	str	r2, [r3, #0]
}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000

080016d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b08f      	sub	sp, #60	; 0x3c
 80016d8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016da:	2314      	movs	r3, #20
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	4a37      	ldr	r2, [pc, #220]	; (80017bc <HAL_RCC_GetSysClockFreq+0xe8>)
 80016e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016e2:	c313      	stmia	r3!, {r0, r1, r4}
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	4a35      	ldr	r2, [pc, #212]	; (80017c0 <HAL_RCC_GetSysClockFreq+0xec>)
 80016ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016ee:	c313      	stmia	r3!, {r0, r1, r4}
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f8:	2300      	movs	r3, #0
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80016fc:	2300      	movs	r3, #0
 80016fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001708:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001710:	220c      	movs	r2, #12
 8001712:	4013      	ands	r3, r2
 8001714:	2b08      	cmp	r3, #8
 8001716:	d006      	beq.n	8001726 <HAL_RCC_GetSysClockFreq+0x52>
 8001718:	2b0c      	cmp	r3, #12
 800171a:	d043      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0xd0>
 800171c:	2b04      	cmp	r3, #4
 800171e:	d144      	bne.n	80017aa <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001720:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001724:	e044      	b.n	80017b0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001728:	0c9b      	lsrs	r3, r3, #18
 800172a:	220f      	movs	r2, #15
 800172c:	4013      	ands	r3, r2
 800172e:	2214      	movs	r2, #20
 8001730:	18ba      	adds	r2, r7, r2
 8001732:	5cd3      	ldrb	r3, [r2, r3]
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001736:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	220f      	movs	r2, #15
 800173c:	4013      	ands	r3, r2
 800173e:	1d3a      	adds	r2, r7, #4
 8001740:	5cd3      	ldrb	r3, [r2, r3]
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001746:	23c0      	movs	r3, #192	; 0xc0
 8001748:	025b      	lsls	r3, r3, #9
 800174a:	401a      	ands	r2, r3
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	025b      	lsls	r3, r3, #9
 8001750:	429a      	cmp	r2, r3
 8001752:	d109      	bne.n	8001768 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001756:	481c      	ldr	r0, [pc, #112]	; (80017c8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001758:	f7fe fcd6 	bl	8000108 <__udivsi3>
 800175c:	0003      	movs	r3, r0
 800175e:	001a      	movs	r2, r3
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	4353      	muls	r3, r2
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
 8001766:	e01a      	b.n	800179e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800176a:	23c0      	movs	r3, #192	; 0xc0
 800176c:	025b      	lsls	r3, r3, #9
 800176e:	401a      	ands	r2, r3
 8001770:	23c0      	movs	r3, #192	; 0xc0
 8001772:	025b      	lsls	r3, r3, #9
 8001774:	429a      	cmp	r2, r3
 8001776:	d109      	bne.n	800178c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800177a:	4814      	ldr	r0, [pc, #80]	; (80017cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800177c:	f7fe fcc4 	bl	8000108 <__udivsi3>
 8001780:	0003      	movs	r3, r0
 8001782:	001a      	movs	r2, r3
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	4353      	muls	r3, r2
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
 800178a:	e008      	b.n	800179e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800178c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800178e:	480e      	ldr	r0, [pc, #56]	; (80017c8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001790:	f7fe fcba 	bl	8000108 <__udivsi3>
 8001794:	0003      	movs	r3, r0
 8001796:	001a      	movs	r2, r3
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	4353      	muls	r3, r2
 800179c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800179e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017a2:	e005      	b.n	80017b0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017a8:	e002      	b.n	80017b0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017aa:	4b07      	ldr	r3, [pc, #28]	; (80017c8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80017ae:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80017b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b00f      	add	sp, #60	; 0x3c
 80017b8:	bd90      	pop	{r4, r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	08002530 	.word	0x08002530
 80017c0:	08002540 	.word	0x08002540
 80017c4:	40021000 	.word	0x40021000
 80017c8:	007a1200 	.word	0x007a1200
 80017cc:	02dc6c00 	.word	0x02dc6c00

080017d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017d4:	4b02      	ldr	r3, [pc, #8]	; (80017e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	20000000 	.word	0x20000000

080017e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80017e8:	f7ff fff2 	bl	80017d0 <HAL_RCC_GetHCLKFreq>
 80017ec:	0001      	movs	r1, r0
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	0a1b      	lsrs	r3, r3, #8
 80017f4:	2207      	movs	r2, #7
 80017f6:	4013      	ands	r3, r2
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_RCC_GetPCLK1Freq+0x28>)
 80017fa:	5cd3      	ldrb	r3, [r2, r3]
 80017fc:	40d9      	lsrs	r1, r3
 80017fe:	000b      	movs	r3, r1
}    
 8001800:	0018      	movs	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	40021000 	.word	0x40021000
 800180c:	08002560 	.word	0x08002560

08001810 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_RCC_NMI_IRQHandler+0x20>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	4013      	ands	r3, r2
 800181c:	2b80      	cmp	r3, #128	; 0x80
 800181e:	d104      	bne.n	800182a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001820:	f000 f80a 	bl	8001838 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	701a      	strb	r2, [r3, #0]
  }
}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000
 8001834:	4002100a 	.word	0x4002100a

08001838 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	025b      	lsls	r3, r3, #9
 800185c:	4013      	ands	r3, r2
 800185e:	d100      	bne.n	8001862 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001860:	e08f      	b.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001862:	2317      	movs	r3, #23
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800186a:	4b6f      	ldr	r3, [pc, #444]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800186c:	69da      	ldr	r2, [r3, #28]
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	055b      	lsls	r3, r3, #21
 8001872:	4013      	ands	r3, r2
 8001874:	d111      	bne.n	800189a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	4b6c      	ldr	r3, [pc, #432]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001878:	69da      	ldr	r2, [r3, #28]
 800187a:	4b6b      	ldr	r3, [pc, #428]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	0549      	lsls	r1, r1, #21
 8001880:	430a      	orrs	r2, r1
 8001882:	61da      	str	r2, [r3, #28]
 8001884:	4b68      	ldr	r3, [pc, #416]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001886:	69da      	ldr	r2, [r3, #28]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	055b      	lsls	r3, r3, #21
 800188c:	4013      	ands	r3, r2
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001892:	2317      	movs	r3, #23
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189a:	4b64      	ldr	r3, [pc, #400]	; (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4013      	ands	r3, r2
 80018a4:	d11a      	bne.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018a6:	4b61      	ldr	r3, [pc, #388]	; (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	4b60      	ldr	r3, [pc, #384]	; (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	0049      	lsls	r1, r1, #1
 80018b0:	430a      	orrs	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b4:	f7fe ffa0 	bl	80007f8 <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	e008      	b.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018be:	f7fe ff9b 	bl	80007f8 <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b64      	cmp	r3, #100	; 0x64
 80018ca:	d901      	bls.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e0a6      	b.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d0:	4b56      	ldr	r3, [pc, #344]	; (8001a2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4013      	ands	r3, r2
 80018da:	d0f0      	beq.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018dc:	4b52      	ldr	r3, [pc, #328]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018de:	6a1a      	ldr	r2, [r3, #32]
 80018e0:	23c0      	movs	r3, #192	; 0xc0
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d034      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	23c0      	movs	r3, #192	; 0xc0
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4013      	ands	r3, r2
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d02c      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018fe:	4b4a      	ldr	r3, [pc, #296]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4a4b      	ldr	r2, [pc, #300]	; (8001a30 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001904:	4013      	ands	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001908:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800190a:	6a1a      	ldr	r2, [r3, #32]
 800190c:	4b46      	ldr	r3, [pc, #280]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	0249      	lsls	r1, r1, #9
 8001912:	430a      	orrs	r2, r1
 8001914:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001916:	4b44      	ldr	r3, [pc, #272]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001918:	6a1a      	ldr	r2, [r3, #32]
 800191a:	4b43      	ldr	r3, [pc, #268]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800191c:	4945      	ldr	r1, [pc, #276]	; (8001a34 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800191e:	400a      	ands	r2, r1
 8001920:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001922:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2201      	movs	r2, #1
 800192c:	4013      	ands	r3, r2
 800192e:	d013      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7fe ff62 	bl	80007f8 <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001938:	e009      	b.n	800194e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f7fe ff5d 	bl	80007f8 <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	4a3c      	ldr	r2, [pc, #240]	; (8001a38 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e067      	b.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194e:	4b36      	ldr	r3, [pc, #216]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	2202      	movs	r2, #2
 8001954:	4013      	ands	r3, r2
 8001956:	d0f0      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001958:	4b33      	ldr	r3, [pc, #204]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	4a34      	ldr	r2, [pc, #208]	; (8001a30 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800195e:	4013      	ands	r3, r2
 8001960:	0019      	movs	r1, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	4b30      	ldr	r3, [pc, #192]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001968:	430a      	orrs	r2, r1
 800196a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800196c:	2317      	movs	r3, #23
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d105      	bne.n	8001982 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001976:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001978:	69da      	ldr	r2, [r3, #28]
 800197a:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800197c:	492f      	ldr	r1, [pc, #188]	; (8001a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800197e:	400a      	ands	r2, r1
 8001980:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2201      	movs	r2, #1
 8001988:	4013      	ands	r3, r2
 800198a:	d009      	beq.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800198c:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	2203      	movs	r2, #3
 8001992:	4393      	bics	r3, r2
 8001994:	0019      	movs	r1, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800199c:	430a      	orrs	r2, r1
 800199e:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2202      	movs	r2, #2
 80019a6:	4013      	ands	r3, r2
 80019a8:	d009      	beq.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019aa:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a24      	ldr	r2, [pc, #144]	; (8001a40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	0019      	movs	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019ba:	430a      	orrs	r2, r1
 80019bc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2220      	movs	r2, #32
 80019c4:	4013      	ands	r3, r2
 80019c6:	d009      	beq.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	2210      	movs	r2, #16
 80019ce:	4393      	bics	r3, r2
 80019d0:	0019      	movs	r1, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691a      	ldr	r2, [r3, #16]
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019d8:	430a      	orrs	r2, r1
 80019da:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	029b      	lsls	r3, r3, #10
 80019e4:	4013      	ands	r3, r2
 80019e6:	d009      	beq.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	2280      	movs	r2, #128	; 0x80
 80019ee:	4393      	bics	r3, r2
 80019f0:	0019      	movs	r1, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699a      	ldr	r2, [r3, #24]
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019f8:	430a      	orrs	r2, r1
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4013      	ands	r3, r2
 8001a06:	d009      	beq.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	2240      	movs	r2, #64	; 0x40
 8001a0e:	4393      	bics	r3, r2
 8001a10:	0019      	movs	r1, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	0018      	movs	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b006      	add	sp, #24
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40007000 	.word	0x40007000
 8001a30:	fffffcff 	.word	0xfffffcff
 8001a34:	fffeffff 	.word	0xfffeffff
 8001a38:	00001388 	.word	0x00001388
 8001a3c:	efffffff 	.word	0xefffffff
 8001a40:	fffcffff 	.word	0xfffcffff

08001a44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e044      	b.n	8001ae0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d107      	bne.n	8001a6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2270      	movs	r2, #112	; 0x70
 8001a62:	2100      	movs	r1, #0
 8001a64:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f7fe fdbf 	bl	80005ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2224      	movs	r2, #36	; 0x24
 8001a72:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2101      	movs	r1, #1
 8001a80:	438a      	bics	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	0018      	movs	r0, r3
 8001a88:	f000 f97c 	bl	8001d84 <UART_SetConfig>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e024      	b.n	8001ae0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f000 fb3b 	bl	800211c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	490d      	ldr	r1, [pc, #52]	; (8001ae8 <HAL_UART_Init+0xa4>)
 8001ab2:	400a      	ands	r2, r1
 8001ab4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	212a      	movs	r1, #42	; 0x2a
 8001ac2:	438a      	bics	r2, r1
 8001ac4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f000 fbd3 	bl	8002284 <UART_CheckIdleState>
 8001ade:	0003      	movs	r3, r0
}
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	ffffb7ff 	.word	0xffffb7ff

08001aec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	4a93      	ldr	r2, [pc, #588]	; (8001d5c <HAL_UART_IRQHandler+0x270>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d112      	bne.n	8001b40 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d00e      	beq.n	8001b40 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2220      	movs	r2, #32
 8001b26:	4013      	ands	r3, r2
 8001b28:	d00a      	beq.n	8001b40 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d100      	bne.n	8001b34 <HAL_UART_IRQHandler+0x48>
 8001b32:	e10b      	b.n	8001d4c <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	0010      	movs	r0, r2
 8001b3c:	4798      	blx	r3
      }
      return;
 8001b3e:	e105      	b.n	8001d4c <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d100      	bne.n	8001b48 <HAL_UART_IRQHandler+0x5c>
 8001b46:	e0cd      	b.n	8001ce4 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d105      	bne.n	8001b5c <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	2390      	movs	r3, #144	; 0x90
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4013      	ands	r3, r2
 8001b58:	d100      	bne.n	8001b5c <HAL_UART_IRQHandler+0x70>
 8001b5a:	e0c3      	b.n	8001ce4 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	4013      	ands	r3, r2
 8001b62:	d00e      	beq.n	8001b82 <HAL_UART_IRQHandler+0x96>
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d009      	beq.n	8001b82 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2201      	movs	r2, #1
 8001b74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	2202      	movs	r2, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <HAL_UART_IRQHandler+0xba>
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d009      	beq.n	8001ba6 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2202      	movs	r2, #2
 8001b98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	2204      	movs	r2, #4
 8001baa:	4013      	ands	r3, r2
 8001bac:	d00d      	beq.n	8001bca <HAL_UART_IRQHandler+0xde>
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d009      	beq.n	8001bca <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2204      	movs	r2, #4
 8001bbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	2208      	movs	r2, #8
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d011      	beq.n	8001bf6 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d103      	bne.n	8001be2 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001be0:	d009      	beq.n	8001bf6 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2208      	movs	r2, #8
 8001be8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bee:	2208      	movs	r2, #8
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d00f      	beq.n	8001c20 <HAL_UART_IRQHandler+0x134>
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	04db      	lsls	r3, r3, #19
 8001c06:	4013      	ands	r3, r2
 8001c08:	d00a      	beq.n	8001c20 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2280      	movs	r2, #128	; 0x80
 8001c10:	0112      	lsls	r2, r2, #4
 8001c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c18:	2220      	movs	r2, #32
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d100      	bne.n	8001c2a <HAL_UART_IRQHandler+0x13e>
 8001c28:	e092      	b.n	8001d50 <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d00c      	beq.n	8001c4c <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2220      	movs	r2, #32
 8001c36:	4013      	ands	r3, r2
 8001c38:	d008      	beq.n	8001c4c <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d004      	beq.n	8001c4c <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	0010      	movs	r0, r2
 8001c4a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c50:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2240      	movs	r2, #64	; 0x40
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b40      	cmp	r3, #64	; 0x40
 8001c5e:	d003      	beq.n	8001c68 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2228      	movs	r2, #40	; 0x28
 8001c64:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001c66:	d033      	beq.n	8001cd0 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f000 fbce 	bl	800240c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2240      	movs	r2, #64	; 0x40
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b40      	cmp	r3, #64	; 0x40
 8001c7c:	d123      	bne.n	8001cc6 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2140      	movs	r1, #64	; 0x40
 8001c8a:	438a      	bics	r2, r1
 8001c8c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d012      	beq.n	8001cbc <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c9a:	4a31      	ldr	r2, [pc, #196]	; (8001d60 <HAL_UART_IRQHandler+0x274>)
 8001c9c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f7fe feb2 	bl	8000a0c <HAL_DMA_Abort_IT>
 8001ca8:	1e03      	subs	r3, r0, #0
 8001caa:	d019      	beq.n	8001ce0 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cba:	e011      	b.n	8001ce0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f000 f858 	bl	8001d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cc4:	e00c      	b.n	8001ce0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f000 f853 	bl	8001d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cce:	e007      	b.n	8001ce0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f000 f84e 	bl	8001d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8001cde:	e037      	b.n	8001d50 <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ce0:	46c0      	nop			; (mov r8, r8)
    return;
 8001ce2:	e035      	b.n	8001d50 <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	035b      	lsls	r3, r3, #13
 8001cea:	4013      	ands	r3, r2
 8001cec:	d00e      	beq.n	8001d0c <HAL_UART_IRQHandler+0x220>
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	03db      	lsls	r3, r3, #15
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d009      	beq.n	8001d0c <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2280      	movs	r2, #128	; 0x80
 8001cfe:	0352      	lsls	r2, r2, #13
 8001d00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	0018      	movs	r0, r3
 8001d06:	f000 fbd2 	bl	80024ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001d0a:	e024      	b.n	8001d56 <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	2280      	movs	r2, #128	; 0x80
 8001d10:	4013      	ands	r3, r2
 8001d12:	d00d      	beq.n	8001d30 <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d009      	beq.n	8001d30 <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d017      	beq.n	8001d54 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	0010      	movs	r0, r2
 8001d2c:	4798      	blx	r3
    }
    return;
 8001d2e:	e011      	b.n	8001d54 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2240      	movs	r2, #64	; 0x40
 8001d34:	4013      	ands	r3, r2
 8001d36:	d00e      	beq.n	8001d56 <HAL_UART_IRQHandler+0x26a>
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2240      	movs	r2, #64	; 0x40
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d00a      	beq.n	8001d56 <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	0018      	movs	r0, r3
 8001d44:	f000 fb99 	bl	800247a <UART_EndTransmit_IT>
    return;
 8001d48:	46c0      	nop			; (mov r8, r8)
 8001d4a:	e004      	b.n	8001d56 <HAL_UART_IRQHandler+0x26a>
      return;
 8001d4c:	46c0      	nop			; (mov r8, r8)
 8001d4e:	e002      	b.n	8001d56 <HAL_UART_IRQHandler+0x26a>
    return;
 8001d50:	46c0      	nop			; (mov r8, r8)
 8001d52:	e000      	b.n	8001d56 <HAL_UART_IRQHandler+0x26a>
    return;
 8001d54:	46c0      	nop			; (mov r8, r8)
  }

}
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b008      	add	sp, #32
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	0000080f 	.word	0x0000080f
 8001d60:	0800244d 	.word	0x0800244d

08001d64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8001d6c:	46c0      	nop			; (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001d7c:	46c0      	nop			; (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b002      	add	sp, #8
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d90:	2317      	movs	r3, #23
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4ac5      	ldr	r2, [pc, #788]	; (80020cc <UART_SetConfig+0x348>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	0019      	movs	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4ac0      	ldr	r2, [pc, #768]	; (80020d0 <UART_SetConfig+0x34c>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4ab7      	ldr	r2, [pc, #732]	; (80020d4 <UART_SetConfig+0x350>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	0019      	movs	r1, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4ab3      	ldr	r2, [pc, #716]	; (80020d8 <UART_SetConfig+0x354>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d125      	bne.n	8001e5a <UART_SetConfig+0xd6>
 8001e0e:	4bb3      	ldr	r3, [pc, #716]	; (80020dc <UART_SetConfig+0x358>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	2203      	movs	r2, #3
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d00f      	beq.n	8001e3a <UART_SetConfig+0xb6>
 8001e1a:	d304      	bcc.n	8001e26 <UART_SetConfig+0xa2>
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d011      	beq.n	8001e44 <UART_SetConfig+0xc0>
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d005      	beq.n	8001e30 <UART_SetConfig+0xac>
 8001e24:	e013      	b.n	8001e4e <UART_SetConfig+0xca>
 8001e26:	231f      	movs	r3, #31
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
 8001e2e:	e064      	b.n	8001efa <UART_SetConfig+0x176>
 8001e30:	231f      	movs	r3, #31
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	2202      	movs	r2, #2
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	e05f      	b.n	8001efa <UART_SetConfig+0x176>
 8001e3a:	231f      	movs	r3, #31
 8001e3c:	18fb      	adds	r3, r7, r3
 8001e3e:	2204      	movs	r2, #4
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	e05a      	b.n	8001efa <UART_SetConfig+0x176>
 8001e44:	231f      	movs	r3, #31
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	2208      	movs	r2, #8
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	e055      	b.n	8001efa <UART_SetConfig+0x176>
 8001e4e:	231f      	movs	r3, #31
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	2210      	movs	r2, #16
 8001e54:	701a      	strb	r2, [r3, #0]
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	e04f      	b.n	8001efa <UART_SetConfig+0x176>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4aa0      	ldr	r2, [pc, #640]	; (80020e0 <UART_SetConfig+0x35c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d132      	bne.n	8001eca <UART_SetConfig+0x146>
 8001e64:	4b9d      	ldr	r3, [pc, #628]	; (80020dc <UART_SetConfig+0x358>)
 8001e66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e68:	23c0      	movs	r3, #192	; 0xc0
 8001e6a:	029b      	lsls	r3, r3, #10
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2280      	movs	r2, #128	; 0x80
 8001e70:	0252      	lsls	r2, r2, #9
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d019      	beq.n	8001eaa <UART_SetConfig+0x126>
 8001e76:	2280      	movs	r2, #128	; 0x80
 8001e78:	0252      	lsls	r2, r2, #9
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d802      	bhi.n	8001e84 <UART_SetConfig+0x100>
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <UART_SetConfig+0x112>
 8001e82:	e01c      	b.n	8001ebe <UART_SetConfig+0x13a>
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	0292      	lsls	r2, r2, #10
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d013      	beq.n	8001eb4 <UART_SetConfig+0x130>
 8001e8c:	22c0      	movs	r2, #192	; 0xc0
 8001e8e:	0292      	lsls	r2, r2, #10
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d005      	beq.n	8001ea0 <UART_SetConfig+0x11c>
 8001e94:	e013      	b.n	8001ebe <UART_SetConfig+0x13a>
 8001e96:	231f      	movs	r3, #31
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e02c      	b.n	8001efa <UART_SetConfig+0x176>
 8001ea0:	231f      	movs	r3, #31
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	e027      	b.n	8001efa <UART_SetConfig+0x176>
 8001eaa:	231f      	movs	r3, #31
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	2204      	movs	r2, #4
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	e022      	b.n	8001efa <UART_SetConfig+0x176>
 8001eb4:	231f      	movs	r3, #31
 8001eb6:	18fb      	adds	r3, r7, r3
 8001eb8:	2208      	movs	r2, #8
 8001eba:	701a      	strb	r2, [r3, #0]
 8001ebc:	e01d      	b.n	8001efa <UART_SetConfig+0x176>
 8001ebe:	231f      	movs	r3, #31
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	701a      	strb	r2, [r3, #0]
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	e017      	b.n	8001efa <UART_SetConfig+0x176>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a85      	ldr	r2, [pc, #532]	; (80020e4 <UART_SetConfig+0x360>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d104      	bne.n	8001ede <UART_SetConfig+0x15a>
 8001ed4:	231f      	movs	r3, #31
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e00d      	b.n	8001efa <UART_SetConfig+0x176>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a81      	ldr	r2, [pc, #516]	; (80020e8 <UART_SetConfig+0x364>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d104      	bne.n	8001ef2 <UART_SetConfig+0x16e>
 8001ee8:	231f      	movs	r3, #31
 8001eea:	18fb      	adds	r3, r7, r3
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	e003      	b.n	8001efa <UART_SetConfig+0x176>
 8001ef2:	231f      	movs	r3, #31
 8001ef4:	18fb      	adds	r3, r7, r3
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69da      	ldr	r2, [r3, #28]
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d000      	beq.n	8001f08 <UART_SetConfig+0x184>
 8001f06:	e07d      	b.n	8002004 <UART_SetConfig+0x280>
  {
    switch (clocksource)
 8001f08:	231f      	movs	r3, #31
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d01c      	beq.n	8001f4c <UART_SetConfig+0x1c8>
 8001f12:	dc02      	bgt.n	8001f1a <UART_SetConfig+0x196>
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <UART_SetConfig+0x1a0>
 8001f18:	e04b      	b.n	8001fb2 <UART_SetConfig+0x22e>
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d025      	beq.n	8001f6a <UART_SetConfig+0x1e6>
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d037      	beq.n	8001f92 <UART_SetConfig+0x20e>
 8001f22:	e046      	b.n	8001fb2 <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f24:	f7ff fc5e 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	005a      	lsls	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	085b      	lsrs	r3, r3, #1
 8001f36:	18d2      	adds	r2, r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	0010      	movs	r0, r2
 8001f40:	f7fe f8e2 	bl	8000108 <__udivsi3>
 8001f44:	0003      	movs	r3, r0
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	61bb      	str	r3, [r7, #24]
        break;
 8001f4a:	e037      	b.n	8001fbc <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	085b      	lsrs	r3, r3, #1
 8001f52:	4a66      	ldr	r2, [pc, #408]	; (80020ec <UART_SetConfig+0x368>)
 8001f54:	189a      	adds	r2, r3, r2
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	0010      	movs	r0, r2
 8001f5e:	f7fe f8d3 	bl	8000108 <__udivsi3>
 8001f62:	0003      	movs	r3, r0
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	61bb      	str	r3, [r7, #24]
        break;
 8001f68:	e028      	b.n	8001fbc <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f6a:	f7ff fbb3 	bl	80016d4 <HAL_RCC_GetSysClockFreq>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	005a      	lsls	r2, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	085b      	lsrs	r3, r3, #1
 8001f7c:	18d2      	adds	r2, r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	0019      	movs	r1, r3
 8001f84:	0010      	movs	r0, r2
 8001f86:	f7fe f8bf 	bl	8000108 <__udivsi3>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	61bb      	str	r3, [r7, #24]
        break;
 8001f90:	e014      	b.n	8001fbc <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	085b      	lsrs	r3, r3, #1
 8001f98:	2280      	movs	r2, #128	; 0x80
 8001f9a:	0252      	lsls	r2, r2, #9
 8001f9c:	189a      	adds	r2, r3, r2
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	0010      	movs	r0, r2
 8001fa6:	f7fe f8af 	bl	8000108 <__udivsi3>
 8001faa:	0003      	movs	r3, r0
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	61bb      	str	r3, [r7, #24]
        break;
 8001fb0:	e004      	b.n	8001fbc <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 8001fb2:	2317      	movs	r3, #23
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]
        break;
 8001fba:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2b0f      	cmp	r3, #15
 8001fc0:	d91b      	bls.n	8001ffa <UART_SetConfig+0x276>
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4a4a      	ldr	r2, [pc, #296]	; (80020f0 <UART_SetConfig+0x36c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d817      	bhi.n	8001ffa <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	200a      	movs	r0, #10
 8001fd0:	183b      	adds	r3, r7, r0
 8001fd2:	210f      	movs	r1, #15
 8001fd4:	438a      	bics	r2, r1
 8001fd6:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	085b      	lsrs	r3, r3, #1
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2207      	movs	r2, #7
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	b299      	uxth	r1, r3
 8001fe4:	183b      	adds	r3, r7, r0
 8001fe6:	183a      	adds	r2, r7, r0
 8001fe8:	8812      	ldrh	r2, [r2, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	183a      	adds	r2, r7, r0
 8001ff4:	8812      	ldrh	r2, [r2, #0]
 8001ff6:	60da      	str	r2, [r3, #12]
 8001ff8:	e082      	b.n	8002100 <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 8001ffa:	2317      	movs	r3, #23
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	e07d      	b.n	8002100 <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 8002004:	231f      	movs	r3, #31
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b02      	cmp	r3, #2
 800200c:	d01b      	beq.n	8002046 <UART_SetConfig+0x2c2>
 800200e:	dc02      	bgt.n	8002016 <UART_SetConfig+0x292>
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <UART_SetConfig+0x29c>
 8002014:	e049      	b.n	80020aa <UART_SetConfig+0x326>
 8002016:	2b04      	cmp	r3, #4
 8002018:	d024      	beq.n	8002064 <UART_SetConfig+0x2e0>
 800201a:	2b08      	cmp	r3, #8
 800201c:	d035      	beq.n	800208a <UART_SetConfig+0x306>
 800201e:	e044      	b.n	80020aa <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002020:	f7ff fbe0 	bl	80017e4 <HAL_RCC_GetPCLK1Freq>
 8002024:	0003      	movs	r3, r0
 8002026:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	085a      	lsrs	r2, r3, #1
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	18d2      	adds	r2, r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	0019      	movs	r1, r3
 8002038:	0010      	movs	r0, r2
 800203a:	f7fe f865 	bl	8000108 <__udivsi3>
 800203e:	0003      	movs	r3, r0
 8002040:	b29b      	uxth	r3, r3
 8002042:	61bb      	str	r3, [r7, #24]
        break;
 8002044:	e036      	b.n	80020b4 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	085b      	lsrs	r3, r3, #1
 800204c:	4a29      	ldr	r2, [pc, #164]	; (80020f4 <UART_SetConfig+0x370>)
 800204e:	189a      	adds	r2, r3, r2
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	0019      	movs	r1, r3
 8002056:	0010      	movs	r0, r2
 8002058:	f7fe f856 	bl	8000108 <__udivsi3>
 800205c:	0003      	movs	r3, r0
 800205e:	b29b      	uxth	r3, r3
 8002060:	61bb      	str	r3, [r7, #24]
        break;
 8002062:	e027      	b.n	80020b4 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002064:	f7ff fb36 	bl	80016d4 <HAL_RCC_GetSysClockFreq>
 8002068:	0003      	movs	r3, r0
 800206a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	085a      	lsrs	r2, r3, #1
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	18d2      	adds	r2, r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	0019      	movs	r1, r3
 800207c:	0010      	movs	r0, r2
 800207e:	f7fe f843 	bl	8000108 <__udivsi3>
 8002082:	0003      	movs	r3, r0
 8002084:	b29b      	uxth	r3, r3
 8002086:	61bb      	str	r3, [r7, #24]
        break;
 8002088:	e014      	b.n	80020b4 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	085b      	lsrs	r3, r3, #1
 8002090:	2280      	movs	r2, #128	; 0x80
 8002092:	0212      	lsls	r2, r2, #8
 8002094:	189a      	adds	r2, r3, r2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	0019      	movs	r1, r3
 800209c:	0010      	movs	r0, r2
 800209e:	f7fe f833 	bl	8000108 <__udivsi3>
 80020a2:	0003      	movs	r3, r0
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	61bb      	str	r3, [r7, #24]
        break;
 80020a8:	e004      	b.n	80020b4 <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 80020aa:	2317      	movs	r3, #23
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
        break;
 80020b2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2b0f      	cmp	r3, #15
 80020b8:	d91e      	bls.n	80020f8 <UART_SetConfig+0x374>
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <UART_SetConfig+0x36c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d81a      	bhi.n	80020f8 <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	e019      	b.n	8002100 <UART_SetConfig+0x37c>
 80020cc:	efff69f3 	.word	0xefff69f3
 80020d0:	ffffcfff 	.word	0xffffcfff
 80020d4:	fffff4ff 	.word	0xfffff4ff
 80020d8:	40013800 	.word	0x40013800
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40004400 	.word	0x40004400
 80020e4:	40004800 	.word	0x40004800
 80020e8:	40004c00 	.word	0x40004c00
 80020ec:	00f42400 	.word	0x00f42400
 80020f0:	0000ffff 	.word	0x0000ffff
 80020f4:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 80020f8:	2317      	movs	r3, #23
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	2201      	movs	r2, #1
 80020fe:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800210c:	2317      	movs	r3, #23
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	781b      	ldrb	r3, [r3, #0]
}
 8002112:	0018      	movs	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	b008      	add	sp, #32
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)

0800211c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	2201      	movs	r2, #1
 800212a:	4013      	ands	r3, r2
 800212c:	d00b      	beq.n	8002146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4a4a      	ldr	r2, [pc, #296]	; (8002260 <UART_AdvFeatureConfig+0x144>)
 8002136:	4013      	ands	r3, r2
 8002138:	0019      	movs	r1, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	2202      	movs	r2, #2
 800214c:	4013      	ands	r3, r2
 800214e:	d00b      	beq.n	8002168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4a43      	ldr	r2, [pc, #268]	; (8002264 <UART_AdvFeatureConfig+0x148>)
 8002158:	4013      	ands	r3, r2
 800215a:	0019      	movs	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	2204      	movs	r2, #4
 800216e:	4013      	ands	r3, r2
 8002170:	d00b      	beq.n	800218a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4a3b      	ldr	r2, [pc, #236]	; (8002268 <UART_AdvFeatureConfig+0x14c>)
 800217a:	4013      	ands	r3, r2
 800217c:	0019      	movs	r1, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	2208      	movs	r2, #8
 8002190:	4013      	ands	r3, r2
 8002192:	d00b      	beq.n	80021ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4a34      	ldr	r2, [pc, #208]	; (800226c <UART_AdvFeatureConfig+0x150>)
 800219c:	4013      	ands	r3, r2
 800219e:	0019      	movs	r1, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	2210      	movs	r2, #16
 80021b2:	4013      	ands	r3, r2
 80021b4:	d00b      	beq.n	80021ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4a2c      	ldr	r2, [pc, #176]	; (8002270 <UART_AdvFeatureConfig+0x154>)
 80021be:	4013      	ands	r3, r2
 80021c0:	0019      	movs	r1, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	2220      	movs	r2, #32
 80021d4:	4013      	ands	r3, r2
 80021d6:	d00b      	beq.n	80021f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	4a25      	ldr	r2, [pc, #148]	; (8002274 <UART_AdvFeatureConfig+0x158>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	0019      	movs	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	2240      	movs	r2, #64	; 0x40
 80021f6:	4013      	ands	r3, r2
 80021f8:	d01d      	beq.n	8002236 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a1d      	ldr	r2, [pc, #116]	; (8002278 <UART_AdvFeatureConfig+0x15c>)
 8002202:	4013      	ands	r3, r2
 8002204:	0019      	movs	r1, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	035b      	lsls	r3, r3, #13
 800221a:	429a      	cmp	r2, r3
 800221c:	d10b      	bne.n	8002236 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4a15      	ldr	r2, [pc, #84]	; (800227c <UART_AdvFeatureConfig+0x160>)
 8002226:	4013      	ands	r3, r2
 8002228:	0019      	movs	r1, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	2280      	movs	r2, #128	; 0x80
 800223c:	4013      	ands	r3, r2
 800223e:	d00b      	beq.n	8002258 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4a0e      	ldr	r2, [pc, #56]	; (8002280 <UART_AdvFeatureConfig+0x164>)
 8002248:	4013      	ands	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	605a      	str	r2, [r3, #4]
  }
}
 8002258:	46c0      	nop			; (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b002      	add	sp, #8
 800225e:	bd80      	pop	{r7, pc}
 8002260:	fffdffff 	.word	0xfffdffff
 8002264:	fffeffff 	.word	0xfffeffff
 8002268:	fffbffff 	.word	0xfffbffff
 800226c:	ffff7fff 	.word	0xffff7fff
 8002270:	ffffefff 	.word	0xffffefff
 8002274:	ffffdfff 	.word	0xffffdfff
 8002278:	ffefffff 	.word	0xffefffff
 800227c:	ff9fffff 	.word	0xff9fffff
 8002280:	fff7ffff 	.word	0xfff7ffff

08002284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af02      	add	r7, sp, #8
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002292:	f7fe fab1 	bl	80007f8 <HAL_GetTick>
 8002296:	0003      	movs	r3, r0
 8002298:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2208      	movs	r2, #8
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d10d      	bne.n	80022c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	0399      	lsls	r1, r3, #14
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	4b16      	ldr	r3, [pc, #88]	; (800230c <UART_CheckIdleState+0x88>)
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	0013      	movs	r3, r2
 80022b6:	2200      	movs	r2, #0
 80022b8:	f000 f82a 	bl	8002310 <UART_WaitOnFlagUntilTimeout>
 80022bc:	1e03      	subs	r3, r0, #0
 80022be:	d001      	beq.n	80022c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e01f      	b.n	8002304 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2204      	movs	r2, #4
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d10d      	bne.n	80022ee <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	03d9      	lsls	r1, r3, #15
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <UART_CheckIdleState+0x88>)
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	0013      	movs	r3, r2
 80022e0:	2200      	movs	r2, #0
 80022e2:	f000 f815 	bl	8002310 <UART_WaitOnFlagUntilTimeout>
 80022e6:	1e03      	subs	r3, r0, #0
 80022e8:	d001      	beq.n	80022ee <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e00a      	b.n	8002304 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2220      	movs	r2, #32
 80022f2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2220      	movs	r2, #32
 80022f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2270      	movs	r2, #112	; 0x70
 80022fe:	2100      	movs	r1, #0
 8002300:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	b004      	add	sp, #16
 800230a:	bd80      	pop	{r7, pc}
 800230c:	01ffffff 	.word	0x01ffffff

08002310 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	1dfb      	adds	r3, r7, #7
 800231e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002320:	e05d      	b.n	80023de <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	3301      	adds	r3, #1
 8002326:	d05a      	beq.n	80023de <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002328:	f7fe fa66 	bl	80007f8 <HAL_GetTick>
 800232c:	0002      	movs	r2, r0
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	429a      	cmp	r2, r3
 8002336:	d302      	bcc.n	800233e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d11b      	bne.n	8002376 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	492f      	ldr	r1, [pc, #188]	; (8002408 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800234a:	400a      	ands	r2, r1
 800234c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2101      	movs	r1, #1
 800235a:	438a      	bics	r2, r1
 800235c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2220      	movs	r2, #32
 8002362:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2220      	movs	r2, #32
 8002368:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2270      	movs	r2, #112	; 0x70
 800236e:	2100      	movs	r1, #0
 8002370:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e043      	b.n	80023fe <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2204      	movs	r2, #4
 800237e:	4013      	ands	r3, r2
 8002380:	d02d      	beq.n	80023de <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69da      	ldr	r2, [r3, #28]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	401a      	ands	r2, r3
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	429a      	cmp	r2, r3
 8002394:	d123      	bne.n	80023de <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2280      	movs	r2, #128	; 0x80
 800239c:	0112      	lsls	r2, r2, #4
 800239e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4917      	ldr	r1, [pc, #92]	; (8002408 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80023ac:	400a      	ands	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2101      	movs	r1, #1
 80023bc:	438a      	bics	r2, r1
 80023be:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2220      	movs	r2, #32
 80023c4:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2270      	movs	r2, #112	; 0x70
 80023d6:	2100      	movs	r1, #0
 80023d8:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e00f      	b.n	80023fe <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	4013      	ands	r3, r2
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	425a      	negs	r2, r3
 80023ee:	4153      	adcs	r3, r2
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	001a      	movs	r2, r3
 80023f4:	1dfb      	adds	r3, r7, #7
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d092      	beq.n	8002322 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	0018      	movs	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	b004      	add	sp, #16
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	fffffe5f 	.word	0xfffffe5f

0800240c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	490a      	ldr	r1, [pc, #40]	; (8002448 <UART_EndRxTransfer+0x3c>)
 8002420:	400a      	ands	r2, r1
 8002422:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2101      	movs	r1, #1
 8002430:	438a      	bics	r2, r1
 8002432:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2220      	movs	r2, #32
 8002438:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002440:	46c0      	nop			; (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b002      	add	sp, #8
 8002446:	bd80      	pop	{r7, pc}
 8002448:	fffffedf 	.word	0xfffffedf

0800244c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	225a      	movs	r2, #90	; 0x5a
 800245e:	2100      	movs	r1, #0
 8002460:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2252      	movs	r2, #82	; 0x52
 8002466:	2100      	movs	r1, #0
 8002468:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	0018      	movs	r0, r3
 800246e:	f7ff fc81 	bl	8001d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002472:	46c0      	nop			; (mov r8, r8)
 8002474:	46bd      	mov	sp, r7
 8002476:	b004      	add	sp, #16
 8002478:	bd80      	pop	{r7, pc}

0800247a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2140      	movs	r1, #64	; 0x40
 800248e:	438a      	bics	r2, r1
 8002490:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2220      	movs	r2, #32
 8002496:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	0018      	movs	r0, r3
 80024a2:	f7ff fc5f 	bl	8001d64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b002      	add	sp, #8
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b002      	add	sp, #8
 80024bc:	bd80      	pop	{r7, pc}
	...

080024c0 <__libc_init_array>:
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	2600      	movs	r6, #0
 80024c4:	4d0c      	ldr	r5, [pc, #48]	; (80024f8 <__libc_init_array+0x38>)
 80024c6:	4c0d      	ldr	r4, [pc, #52]	; (80024fc <__libc_init_array+0x3c>)
 80024c8:	1b64      	subs	r4, r4, r5
 80024ca:	10a4      	asrs	r4, r4, #2
 80024cc:	42a6      	cmp	r6, r4
 80024ce:	d109      	bne.n	80024e4 <__libc_init_array+0x24>
 80024d0:	2600      	movs	r6, #0
 80024d2:	f000 f821 	bl	8002518 <_init>
 80024d6:	4d0a      	ldr	r5, [pc, #40]	; (8002500 <__libc_init_array+0x40>)
 80024d8:	4c0a      	ldr	r4, [pc, #40]	; (8002504 <__libc_init_array+0x44>)
 80024da:	1b64      	subs	r4, r4, r5
 80024dc:	10a4      	asrs	r4, r4, #2
 80024de:	42a6      	cmp	r6, r4
 80024e0:	d105      	bne.n	80024ee <__libc_init_array+0x2e>
 80024e2:	bd70      	pop	{r4, r5, r6, pc}
 80024e4:	00b3      	lsls	r3, r6, #2
 80024e6:	58eb      	ldr	r3, [r5, r3]
 80024e8:	4798      	blx	r3
 80024ea:	3601      	adds	r6, #1
 80024ec:	e7ee      	b.n	80024cc <__libc_init_array+0xc>
 80024ee:	00b3      	lsls	r3, r6, #2
 80024f0:	58eb      	ldr	r3, [r5, r3]
 80024f2:	4798      	blx	r3
 80024f4:	3601      	adds	r6, #1
 80024f6:	e7f2      	b.n	80024de <__libc_init_array+0x1e>
 80024f8:	08002568 	.word	0x08002568
 80024fc:	08002568 	.word	0x08002568
 8002500:	08002568 	.word	0x08002568
 8002504:	0800256c 	.word	0x0800256c

08002508 <memset>:
 8002508:	0003      	movs	r3, r0
 800250a:	1812      	adds	r2, r2, r0
 800250c:	4293      	cmp	r3, r2
 800250e:	d100      	bne.n	8002512 <memset+0xa>
 8002510:	4770      	bx	lr
 8002512:	7019      	strb	r1, [r3, #0]
 8002514:	3301      	adds	r3, #1
 8002516:	e7f9      	b.n	800250c <memset+0x4>

08002518 <_init>:
 8002518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800251e:	bc08      	pop	{r3}
 8002520:	469e      	mov	lr, r3
 8002522:	4770      	bx	lr

08002524 <_fini>:
 8002524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252a:	bc08      	pop	{r3}
 800252c:	469e      	mov	lr, r3
 800252e:	4770      	bx	lr
